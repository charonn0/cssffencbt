#tag ClassProtected Class AnimationTask	#tag Method, Flags = &h0		Sub Constructor(TheItem As RectControl, TheNewRect As AnimationRect, TheDuration As Double)		  me.item = theitem		  me.newrect = thenewrect		  me.duration = theduration		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SetRectNow(NewRect As AnimationRect)		  if item isa rectcontrol then		    rectcontrol(item).bounds = newrect		  elseif item isa window then		    window(item.objectvalue).bounds = newrect		  end		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function GetCurrentRect() As AnimationRect		  if item isa rectcontrol then		    return rectcontrol(item).bounds		  elseif item isa window then		    return window(item.objectvalue).bounds		  end		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Constructor(TheItem As RectControl)		  me.item = theitem		  me.newrect = theitem.bounds		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function Delta() As AnimationRect		  dim r,delta as AnimationRect		  r = me.startrect		  delta.top = newrect.top - r.top		  delta.left = newrect.left - r.left		  delta.width = newrect.width - r.width		  delta.height = newrect.height - r.height		  return delta		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Constructor(TheItem As Window)		  me.item = theitem		  me.newrect = theitem.bounds		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Constructor(TheItem As Window, TheNewRect As AnimationRect, TheDuration As Double)		  me.item = theitem		  me.newrect = thenewrect		  me.duration = theduration		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function RunTime() As Double		  return microseconds - me.starttime		End Function	#tag EndMethod	#tag Property, Flags = &h0		Item As Variant	#tag EndProperty	#tag Property, Flags = &h0		NewRect As AnimationRect	#tag EndProperty	#tag Property, Flags = &h21		Private pFrames As Integer = 0	#tag EndProperty	#tag ComputedProperty, Flags = &h0		#tag Getter			Get			return pframes			End Get		#tag EndGetter		#tag Setter			Set			pframes = value			frame = 0			End Set		#tag EndSetter		Frames As Integer	#tag EndComputedProperty	#tag ComputedProperty, Flags = &h0		#tag Getter			Get			return pframes / animationcore.fps			End Get		#tag EndGetter		#tag Setter			Set			pframes = value * animationcore.fps			frame = 0			End Set		#tag EndSetter		Duration As Double	#tag EndComputedProperty	#tag Property, Flags = &h0		Frame As Integer = 0	#tag EndProperty	#tag Property, Flags = &h0		StartRect As AnimationRect	#tag EndProperty	#tag Property, Flags = &h0		#tag Note			NextTask is used to create "chained" animations. Once this animation is complete, the animation			in NextTask will automatically begin.		#tag EndNote		NextTask As AnimationTask	#tag EndProperty	#tag Property, Flags = &h0		EasingMethod As Integer = 0	#tag EndProperty	#tag Property, Flags = &h0		StartTime As Double	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Frames"			Group="Behavior"			InitialValue="0"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="Duration"			Group="Behavior"			InitialValue="0"			Type="Double"		#tag EndViewProperty		#tag ViewProperty			Name="Frame"			Group="Behavior"			InitialValue="0"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="EasingMethod"			Group="Behavior"			InitialValue="0"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="StartTime"			Group="Behavior"			InitialValue="0"			Type="Double"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass