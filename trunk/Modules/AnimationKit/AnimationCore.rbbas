#tag ModuleProtected Module AnimationCore	#tag Method, Flags = &h0		Function Bounds(Extends Item As RectControl) As AnimationRect		  dim r as AnimationRect		  r.left = item.left		  r.top = item.top		  r.width = item.width		  r.height = item.height		  return r		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Bounds(Extends Item As RectControl, Assigns NewRect As AnimationRect)		  item.width = newrect.width		  item.height = newrect.height		  item.top = newrect.top		  item.left = newrect.left		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub Start()		  animtimer = new animationtimer		  fps = kframespersecond		  animtimer.mode = timer.modemultiple		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function NewAnimationTask(Extends Item As RectControl) As AnimationTask		  dim task as animationtask		  task = new animationtask(item)		  return task		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Animate(Extends Item As RectControl, ToRect As AnimationRect, Duration As Double, EasingMethod As Integer = 0)		  dim task as animationtask		  task = item.newanimationtask		  task.duration = duration		  task.newrect = torect		  task.easingmethod = easingmethod		  		  if task.run then		  end		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub Start(FramesPerSecond As Integer)		  animtimer = new animationtimer		  fps = FramesPerSecond		  animtimer.mode = timer.modemultiple		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub Stop()		  animtimer.mode = timer.modeoff		  animtimer = nil		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function Bounds(Extends Item As Window) As AnimationRect		  dim r as AnimationRect		  r.left = item.left		  r.top = item.top		  r.width = item.width		  r.height = item.height		  return r		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Bounds(Extends Item As Window, Assigns NewRect As AnimationRect)		  item.width = newrect.width		  item.height = newrect.height		  item.top = newrect.top		  item.left = newrect.left		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Animate(Extends Item As Window, ToRect As AnimationRect, Duration As Double, EasingMethod As Integer = 0)		  dim task as animationtask		  task = item.newanimationtask		  task.duration = duration		  task.newrect = torect		  task.easingmethod = easingmethod		  		  if task.run then		  end		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function NewAnimationTask(Extends Item As Window) As AnimationTask		  dim task as animationtask		  task = new animationtask(item)		  return task		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function CreateRect(rTop As Integer, rLeft As Integer, rHeight As Integer, rWidth As Integer) As AnimationRect		  dim r as AnimationRect		  r.top = rtop		  r.left = rleft		  r.height = rheight		  r.width = rwidth		  return r		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Run(Extends Task As AnimationTask) As Boolean		  // The run method has been moved here, we'll now check for tasks already existing on the same object		  		  dim i as integer		  for i = 0 to ubound(tasks)		    if tasks(i).item = task.item then		      // we already have this one to work on		      if tasks(i).nexttask = nil then		        // the previous task of the same item does not have a sub-task		        tasks(i).nexttask = task		        return true		      else		        return false		      end		    end		  next		  		  // the task in question does not already exist, so add it		  tasks.append task		End Function	#tag EndMethod	#tag ComputedProperty, Flags = &h1		#tag Getter			Get			if animtimer <> nil then			return round(1000 / animtimer.period)			end			End Get		#tag EndGetter		#tag Setter			Set			if animtimer <> nil then			animtimer.period = 1000 / value			end			End Set		#tag EndSetter		Protected FPS As Integer	#tag EndComputedProperty	#tag Property, Flags = &h21		Private AnimTimer As AnimationTimer	#tag EndProperty	#tag Property, Flags = &h1		Protected Tasks() As AnimationTask	#tag EndProperty	#tag Constant, Name = kFramesPerSecond, Type = Double, Dynamic = False, Default = \"24", Scope = Protected	#tag EndConstant	#tag Structure, Name = AnimationRect, Flags = &h0		Left As Integer		  Top As Integer		  Width As Integer		Height As Integer	#tag EndStructure	#tag ViewBehavior		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Module#tag EndModule