#tag ClassProtected Class BCDisplayInherits Canvas	#tag Event		Sub Paint(g As Graphics)		  '============		  Dim i, c, incValue as short		  '============		  		  //Check to see if the scroll bar is actually being used		  If sbScroll.Maximum <= 0 then		    ScrollValue = 0		  End If		  		  //Encloses		  g.ForeColor = &c7E7E7E		  g.DrawLine(0,0,0, Me.Height)		  g.DrawLine(Me.Width-1, 0, Me.Width-1, Me.Height)		  		  //Dynamically draws row backgrounds.		  c = 0		  While c < Me.RowCount		    If c MOD 2 <> 0 then		      g.ForeColor = ThemeColor(listRowColorOdd)		    Else		      g.ForeColor = ThemeColor(listRowColorEven)		    End If		    g.FillRect(1,c*50 - ScrollValue,me.width -2 ,50)		    g.DrawLine(Me.Left, Me.Top + Me.Height, Me.Left + Me.Width, Me.Top + Me.Height)		    c = c + 1		  Wend		  		  //Draws a selected row highlight if needed.		  If Me.RowSelected = True then		    For i = 1 to Me.Width - 11		      g.DrawPicture(RowHighlight, i, (Me.SelectedRow * Me.RowHeight) - 50 - ScrollValue)		    Next		  End If		  		  		  //Draws contents of the items dropped.		  For i = 0 to UBound(Details)		    incValue = (Details(i).RowTag * RowHeight) - (StartRowCount* RowHeight)		    g.DrawPicture(Details(i).Icon, 6, incValue - 40 -ScrollValue)		    g.TextSize = 12		    g.ForeColor = &c000000		    g.DrawString(Details(i).DisplayName, 45, incValue - 18 - ScrollValue, 289, True)		    g.DrawString(Details(i).Size, 344, incValue - 18 - ScrollValue)		  Next		  		  //If there is a highlighted row - its text needs to be white.		  If Me.RowSelected then		    'Changes text to white.		    g.ForeColor = &cFFFFFF		    //get text and rewrite		    g.DrawString(Details(SelectedRow - 1).DisplayName, 45, (SelectedRow * RowHeight) - ScrollValue - 18, 289, True)		    g.DrawString(Details(SelectedRow - 1).Size, 344, (SelectedRow * RowHeight) - ScrollValue - 18)		  End If		  		End Sub	#tag EndEvent	#tag Event		Sub Open()		  Me.AcceptFileDrop(FileTypes.AnyFile)		  		  //Draws the enclosing rectangle		  Me.Graphics.ForeColor = &c7E7E7E		  Me.graphics.DrawLine(0,Me.Height + 1, Me.Width, Me.Height + 1)		  		  Me.RowHighlight = DefaultRowHighlight		End Sub	#tag EndEvent	#tag Event		Sub DropObject(obj As DragItem, action As Integer)		  If Action <> 3 then		    Do		      If ObjectDropped(obj.FolderItem) = True Then//We return false in the event if we dont want to add the folderitem to the list.		        Update(obj.FolderItem)		      End If		    Loop until obj.NextItem = False		    		  End If		  		End Sub	#tag EndEvent	#tag Event		Function MouseDown(X As Integer, Y As Integer) As Boolean		  If Not IsContextualClick Then		    //Tells the class what row has been selected.		    		    Dim Row as integer = (((y + me.ScrollValue) \ me.RowHeight) + 1)		    		    If Row <= Me.ItemCount then 'If an item has actually been added.		      Me.SelectedRow = Row		      If Me.RowSelected = False then		        RowSelected = True		      End If		      SelectRow(Row)		      EnableMenuItems		      Me.Refresh		    Else		      Unselected		    End If		    Return True		  End If		  		End Function	#tag EndEvent	#tag Event		Function ConstructContextualMenu(base as MenuItem, x as Integer, y as Integer) As Boolean		  base.append(new MenuItem("Add"))		  		  If wMain.WindowStatus = 2 then		    Dim rmv  as New MenuItem		    Dim cncl as new MenuItem		    rmv.Text = "Remove"		    cncl.Text = "Cancel Selection"		    		    If Me.RowSelected Then		      rmv.Enabled = True		      cncl.Enabled = True		    Else		      rmv.Enabled = False		      cncl.Enabled = False		    End If		    base.append(rmv)		    base.append(cncl)		  End If		  		  base.append(new MenuItem("Change Algorithm")) 'Adds an item to the menu.		  		  Return True		End Function	#tag EndEvent	#tag Event		Function ContextualMenuAction(hitItem as MenuItem) As Boolean		  If HitItem <> Nil Then		    Select Case HitItem.Text		    Case "Change Algorithm"		      wChangeEncryption.Show		    Case "Cancel Selection"		      Me.RowSelected = False		      Me.Refresh		    Case "Remove"		      Me.Remove(Me.SelectedRow)		    Case "Add"		      wMain.AddItemWithDialogue		    End Select		  End If		  Return True		End Function	#tag EndEvent	#tag Method, Flags = &h0		Sub Update(f as folderitem)		  Dim  i, m, icon as picture		  RowCount = RowCount + 1		  		  // Retrieves icon from the folderitem passed.		  i = f.IconImageMBS(32)		  m = f.IconMaskMBS(32)		  icon = NewPicture(i.width,i.height,32)		  icon.Graphics.DrawPicture i,0,0		  icon.Mask.Graphics.DrawPicture m,0,0		  		  //Sets a new set of properties		  Dim d as new BCfiDetails, c as new CalcSize		  		  d.Icon = icon		  d.DisplayName = f.DisplayName		  d.Size = c.Calculate(f)		  d.RowTag = RowCount		  		  sbScroll.Maximum = (RowCount * RowHeight) - (StartRowCount * RowHeight * 2)		  Details.Append(d)		  Me.ItemCount = Me.ItemCount + 1		  		  Me.Refresh		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Reset()		  RowCount = 3		  ReDim Details(-1)		  ItemCount = 0		  Me.RowSelected = False		  Me.SelectedRow = 0		  Me.Refresh		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Remove(Row as Integer)		  Dim i as integer		  For i = SelectedRow to UBound(Details)		    Details(i).RowTag = Details(i).RowTag - 1		  Next		  Details.Remove(row - 1)		  		  Me.RowSelected = False		  Me.RowCount = Me.RowCount - 1		  Me.ItemCount = Me.ItemCount - 1		  sbScroll.Maximum = (RowCount * RowHeight) - (StartRowCount * RowHeight * 2)		  		  Me.Refresh		  		  ItemRemoved(Row)		End Sub	#tag EndMethod	#tag Hook, Flags = &h0		Event SelectRow(RowNumber as Integer)	#tag EndHook	#tag Hook, Flags = &h0		Event ItemRemoved(RowRemoved as integer)	#tag EndHook	#tag Hook, Flags = &h0		Event ObjectDropped(obj as FolderItem) As Boolean	#tag EndHook	#tag Hook, Flags = &h0		Event Unselected()	#tag EndHook	#tag Property, Flags = &h0		#tag Note			Height, in pixels of each row.		#tag EndNote		RowHeight As Integer = 50	#tag EndProperty	#tag Property, Flags = &h0		#tag Note			Stores the amount of rows currently being displayed.		#tag EndNote		RowCount As Integer = 3	#tag EndProperty	#tag Property, Flags = &h0		ScrollValue As Integer = 0	#tag EndProperty	#tag Property, Flags = &h0		Details() As BCfiDetails	#tag EndProperty	#tag Property, Flags = &h0		sbScroll As ScrollBar	#tag EndProperty	#tag Property, Flags = &h21		Private StartRowCount As Integer = 3	#tag EndProperty	#tag Property, Flags = &h0		RowSelected As Boolean	#tag EndProperty	#tag Property, Flags = &h0		SelectedRow As Integer	#tag EndProperty	#tag Property, Flags = &h21		#tag Note			Holds the number of items being contained.		#tag EndNote		Private ItemCount As Integer = 0	#tag EndProperty	#tag Property, Flags = &h0		RowHighlight As Picture	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="ControlOrder"			Visible=true			Group="Position"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			Type="String"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Width"			Visible=true			Group="Position"			InitialValue="100"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Height"			Visible=true			Group="Position"			InitialValue="100"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="LockLeft"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="LockTop"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="LockRight"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="LockBottom"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="TabPanelIndex"			Group="Position"			InitialValue="0"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Visible"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="HelpTag"			Visible=true			Group="Appearance"			Type="String"			EditorType="MultiLineEditor"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="AutoDeactivate"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Enabled"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="UseFocusRing"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Backdrop"			Visible=true			Group="Appearance"			Type="Picture"			EditorType="Picture"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="AcceptFocus"			Visible=true			Group="Behavior"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="AcceptTabs"			Visible=true			Group="Behavior"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="EraseBackground"			Visible=true			Group="Behavior"			InitialValue="True"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="InitialParent"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="RowHeight"			Group="Behavior"			InitialValue="50"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="RowCount"			Group="Behavior"			InitialValue="0"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="ScrollValue"			Group="Behavior"			InitialValue="0"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="SelectedRow"			Group="Behavior"			InitialValue="0"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="RowSelected"			Group="Behavior"			InitialValue="0"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="RowHighlight"			Group="Behavior"			InitialValue="0"			Type="Picture"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass