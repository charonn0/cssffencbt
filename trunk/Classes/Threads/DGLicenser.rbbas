#tag ClassProtected Class DGLicenserInherits Thread	#tag Event		Sub Run()		  Select Case Task		  Case 1		    //If we have old data then we don't need the rest of the checks.		    If CheckForOldData Then		      Return		    End If		    //Load the license file		    LoadSerialNumber		    		    //Check the serial is valid		    If sn <> "" AND regName <> "" Then 'If there isnt a sn or regname then we can just stay in trial mode.		      If Not checkSerialNumber(sn, RegName) Then		        voidSerial		      Else		        TrialMode = False		      End If		    End If		  Case 2		    SaveSerialNumber		  Case 3		    LoadSerialNumber		  End Select		End Sub	#tag EndEvent	#tag Method, Flags = &h0		Sub OpeningCheck()		  Task = 1		  Me.Run		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub LoadSerialNumber()		  Dim x as FolderItem		  x = SpecialFolder.ApplicationData.Child("BitClamp").Child("BitClamp.bclicense")		  		  If  x = Nil OR x.Exists = False Then		    //First time run. - set expiry date.		    ed = new Date		    ed.Day = ed.Day + 15		    SaveSerialNumber		    Dim Ben As New DGRemainingcalc		    Ben.Run		    Me.Kill		  Else		    If NOT decryptLicenseFile(x) Then		      MsgBox "There was an error loading the license information, it may have been corrupted. Please re-enter your serial number."		      Return		    End If		    Dim y as BinaryStream		    y = x.OpenAsBinaryFile		    		    If y.ReadBoolean = True then		      sn = y.ReadPString		      regName = y.ReadPString		    Else		      ed = New Date		      ed.TotalSeconds = y.ReadDouble		      		      Dim compare as new Date		      If ed.TotalSeconds <= Compare.TotalSeconds Then		        wNag.Show		        wMain.Visible = False		      End If		      Dim Ben As New DGRemainingcalc		      Ben.Run		    End If		    		  End If		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SaveSerialNumber()		  Dim x as FolderItem		  Dim y as BinaryStream		  		  x = SpecialFolder.ApplicationData.Child("BitClamp").Child("BitClamp.bclicense")		  If x = NIL Then		    //Create the file		    SpecialFolder.ApplicationData.Child("BitClamp").CreateAsFolder		    y = SpecialFolder.ApplicationData.Child("BitClamp").Child("BitClamp.bclicense").CreateBinaryFile("")		  Else		    y = x.CreateBinaryFile("")		  End If		  		  		  'We are either saving a serial number or an expiry date, therefore this file type stores one or the other.		  'Write a boolean - true means were storing a serial, false means an ExpiryDate.		  		  If sn = "" Then		    y.WriteBoolean(False)		    y.WriteDouble(ed.TotalSeconds)		  Else		    y.WriteBoolean(True)		    y.WritePString(sn)		    y.WritePString(regName)		  End If		  If NOT encryptLicenseFile(SpecialFolder.ApplicationData.Child("BitClamp").Child("BitClamp.bclicense")) Then		    MsgBox "There was an error saving the license information, it may have been corrupted. On restarting the program please re-enter your serial number."		  End If		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub newSave()		  //Used to start a new thread to save the license.		  //This allows us to use the save license method in the OpeningCheck		  Me.Task = 2		  Me.Run		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub newLoad()		  Me.Task = 3		  Me.Run		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Function encryptLicenseFile(licenseFile as FolderItem) As Boolean		  #pragma DisableBackgroundTasks		  //Dims		  Dim temp as FolderItem = TemporaryFolder.Child("tempBitClampLicense.bclicense")		  Dim inStream, outStream As BinaryStream		  Dim block As MemoryBlock		  		  //Set in and out streams		  inStream = licenseFile.OpenAsBinaryFile		  outStream = temp.CreateBinaryFile("")		  		  //Stream in data and out encrypted data.		  Dim Mike As New BlowfishCBC("quickkey")		  If inStream <> NIL AND outStream <> NIL Then		    While inStream.Position < inStream.Length		      app.YieldToNextThread  'Keeps the app responsive		      Block = inStream.Read(80)		      Block = Mike.Encrypt(Block)		      outStream.Write(Block)		    Wend		    Block = Mike.FinishEncrypt()		    outStream.Write(Block)		    inStream.Close		    outStream.Close		  Else		    Return False		  End If		  		  //Move file to license location		  temp.MoveFileTo(licenseFile)		  Return True		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Function decryptLicenseFile(licenseFile as FolderItem) As Boolean		  #pragma DisableBackgroundTasks		  		  //Dims		  Dim temp as FolderItem = TemporaryFolder.Child("tempBitClampLicense.bclicense")		  Dim inStream, outStream As BinaryStream		  Dim block As MemoryBlock		  		  //Set in and out streams		  inStream = licenseFile.OpenAsBinaryFile		  outStream = temp.CreateBinaryFile("")		  		  //Stream in data and out encrypted data.		  Dim Mike As New BlowfishCBC("quickkey")		  If inStream <> NIL AND outStream <> NIL Then		    While inStream.Position < inStream.Length		      app.YieldToNextThread  'Keeps the app responsive		      Block = inStream.Read(80)		      Block = Mike.Decrypt(Block)		      outStream.Write(Block)		    Wend		    Block = Mike.FinishDecrypt()		    outStream.Write(Block)		    inStream.Close		    outStream.Close		  Else		    Return False		  End If		  		  //Move file to license location		  temp.MoveFileTo(licenseFile)		  Return True		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function checkSerialNumber(sn As String, name As String) As Boolean		  '## Check against black list.		  Return ChexCereal(name, BitClamp.kVersionKey, sn)		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Function ChexCereal(key1 as string, key2 as string, cereal as string) As Boolean		  // Created by Tomis E (gostcoder@yahoo.com)		  		  // check the serial against the keys and determines if it is valid		  		  		  #pragma BackgroundTasks false		  #pragma BoundsChecking false		  #pragma NilObjectChecking false		  #pragma StackOverflowChecking false		  		  if not bCerealInBowl then		    PourCereal		  end		  		  Return (MakeCereal(key1,key2)=cereal)		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Function MakeCereal(key1 as string, key2 as string) As String		  // Created by Tomis E (gostcoder@yahoo.com)		  		  // returns a serial from the keys		  		  #pragma BackgroundTasks false		  #pragma BoundsChecking false		  #pragma NilObjectChecking false		  #pragma StackOverflowChecking false		  		  dim iKey(-1),i,x,k,u,e as Integer		  dim sCereal(-1),sKey,s as String		  		  if not bCerealInBowl then		    PourCereal		  end		  		  // build the key that we use against iCerealKey to create the serial		  sKey=uppercase(key1+key2)		  e=len(sKey)		  for i=1 to Len(sKey)		    s=mid(sKey,i,1)		    x=sCerealBits.IndexOf(s)		    if x>-1 then		      iKey.Append x		    end		  next		  		  if ubound(iKey)=-1 then		    iKey.Append 1		  end		  		  x=0		  k=0		  u=UBound(iKey)		  while e>iCerealBitsLen		    e=e-iCerealBitsLen		  wend		  		  for i=0 to UBound(iCerealKey)		    if iCerealKey(i)=0 then		      sCereal.Append "-"		    else		      k=iCerealKey(i)+iKey(x)+e		      while k>iCerealBitsLen		        k=k-iCerealBitsLen		      wend		      sCereal.Append sCerealBits(k)		      x=x+1		      if x>u then		        x=0		      end		    end		  next		  		  Return join(sCereal,"")		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Sub PourCereal()		  // Created by Tomis E (gostcoder@yahoo.com)		  		  // creates the foundation values for the serial generator		  		  // edit sCerealCharacters and iCerealKey to create a customized serial style		  		  #pragma BackgroundTasks false		  #pragma BoundsChecking false		  #pragma NilObjectChecking false		  #pragma StackOverflowChecking false		  		  dim i as Integer		  		  'const sCerealCharacters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ123456789"		  		  // we want a dissorganized string, to make it harder to crack the serial generation		  const sCerealCharacters= "M1DSAOU90R1U2IFOANG3SALSDA361LKSD765SA91GFMA"		  		  bCerealInBowl=true		  		  for i=1 to Len(sCerealCharacters)		    sCerealBits.Append mid(sCerealCharacters,i,1)		  next		  		  // the iCerealKey can have as many items as you want		  // 0 will show up as a dash in the serial string		  // the values are between 1 and the sCerealCharacters length		  iCerealKey.Append 5		  iCerealKey.Append 3		  iCerealKey.Append 20		  iCerealKey.Append 16		  iCerealKey.Append 0		  iCerealKey.Append 11		  iCerealKey.Append 18		  iCerealKey.Append 24		  iCerealKey.Append 9		  iCerealKey.Append 0		  iCerealKey.Append 1		  iCerealKey.Append 31		  iCerealKey.Append 35		  iCerealKey.Append 18		  iCerealKey.Append 0		  iCerealKey.Append 6		  iCerealKey.Append 4		  iCerealKey.Append 29		  iCerealKey.Append 25		  iCerealKey.Append 0		  iCerealKey.Append 3		  iCerealKey.Append 14		  iCerealKey.Append 23		  iCerealKey.Append 30		  iCerealBitsLen=len(sCerealCharacters)-1		  		  // this code was used to generate the dissorganized version of sCerealCharacters		  'sCerealBits.Shuffle		  'Window1.EditField1.Text=join(sCerealBits,"")		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub voidSerial()		  //This is run when at any point a serial is found to be void whether it be from the black list or otherwise.		  MsgBox("The serial you are using is invalid. Please support us by purchasing a license.")		  TrialMode = True		  sn = ""		  regName = ""		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Function CheckForOldData() As Boolean		  Dim oldfile As FolderItem = PreferencesFolder.Child(".verone.bclicense")		  Dim newFile As FolderItem = SpecialFolder.ApplicationData.Child("BitClamp").Child("BitClamp.bclicense") 		  Dim y As BinaryStream		  		  //Checks for an old serial number, validates it generates a new serial, registers it and offers the user the serial for their records.		  If oldfile = Nil OR oldfile.exists = False Then		    //We have no old data.		    Return False		  End If		  		  //If we have new data (for some reason the old data hasn't deleted.		  If newFile <> Nil Or newFile.Exists = True  Then		    Return False		  End If		  		  //We have old data so load it		  //Decrypt the file.		  If NOT decryptLicenseFile(oldfile) Then		    MsgBox "There was an error when trying to access some license data. Please report #DGLcfod12. Due to this BitClamp will run in trial mode until a serial number is re-entered."		    Return False		  End If		  		  y = oldfile.OpenAsBinaryFile		  If y.ReadBoolean = True then		    sn = y.ReadPString		    regName = y.ReadPString		    y.close		    		    sn = MakeCereal(regName, BitClamp.kVersionKey)		    		    wOldSerial.Show		    SaveSerialNumber		    oldfile.Delete		  Else		    ed = New Date		    ed.TotalSeconds = y.ReadDouble		    		    Dim compare as new Date		    If ed.TotalSeconds <= Compare.TotalSeconds Then		      wNag.Show		      wMain.Visible = False		    End If		    Dim Ben As New DGRemainingcalc		    Ben.Run		    oldfile.Delete		  End If		  		  Return True		End Function	#tag EndMethod	#tag Property, Flags = &h21		Private Task As Short	#tag EndProperty	#tag Property, Flags = &h21		Private sCerealBits(-1) As string	#tag EndProperty	#tag Property, Flags = &h21		Private iCerealKey(-1) As integer	#tag EndProperty	#tag Property, Flags = &h21		Private iCerealBitsLen As integer	#tag EndProperty	#tag Property, Flags = &h21		Private bCerealInBowl As boolean	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="Priority"			Visible=true			Group="Behavior"			InitialValue="5"			Type="Integer"			InheritedFrom="Thread"		#tag EndViewProperty		#tag ViewProperty			Name="StackSize"			Visible=true			Group="Behavior"			InitialValue="0"			Type="Integer"			InheritedFrom="Thread"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass