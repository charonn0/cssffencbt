#tag ClassProtected Class DGlogListBoxInherits Listbox	#tag Event		Function CellBackgroundPaint(g As Graphics, row As Integer, column As Integer) As Boolean		  If ActualRow(row) = -1 Then		    If ActualRowCount <> 0 Then		      //Get which row it would be if it existed and then decide how to paint it.		      If (row + 1 - ActualRowDB.UBound) Mod 2=0 then		        g.ForeColor = ThemeColor(listRowColorEven)		      else		        g.ForeColor = ThemeColor(listRowColorOdd)		      end if		      g.FillRect 0,0,g.width,g.height		    Else		      //We have had no rows added		      If row Mod 2=0 then		        g.ForeColor = ThemeColor(listRowColorEven)		      else		        g.ForeColor = ThemeColor(listRowColorOdd)		      end if		      g.FillRect 0,0,g.width,g.height		    End If		  Else		    //Paint the color of the actual row depending on the order.		    If ActualRow(row) Mod 2<>0 then		      g.ForeColor = ThemeColor(listRowColorEven)		    else		      g.ForeColor = ThemeColor(listRowColorOdd)		    end if		    g.FillRect 0,0,g.width,g.height		  End If		  		  		  		End Function	#tag EndEvent	#tag Event		Sub MouseUp(x As Integer, y As Integer)		  //		End Sub	#tag EndEvent	#tag Event		Sub MouseMove(X As Integer, Y As Integer)		  //		End Sub	#tag EndEvent	#tag Event		Sub MouseExit()		  //		End Sub	#tag EndEvent	#tag Event		Sub MouseEnter()		  //		End Sub	#tag EndEvent	#tag Event		Sub MouseDrag(x As Integer, y As Integer)		  //		End Sub	#tag EndEvent	#tag Event		Function MouseDown(x As Integer, y As Integer) As Boolean		  //		End Function	#tag EndEvent	#tag Event		Sub LostFocus()		  //		End Sub	#tag EndEvent	#tag Event		Function KeyDown(Key As String) As Boolean		  //		End Function	#tag EndEvent	#tag Event		Sub GotFocus()		  //		End Sub	#tag EndEvent	#tag Event		Sub ExpandRow(row As Integer)		  //		End Sub	#tag EndEvent	#tag Event		Sub EnableMenuItems()		  //		End Sub	#tag EndEvent	#tag Event		Sub DropObject(obj As DragItem, action As Integer)		  //		End Sub	#tag EndEvent	#tag Event		Function DragRow(drag As DragItem, row As Integer) As Boolean		  //		End Function	#tag EndEvent	#tag Event		Function DragReorderRows(newPosition as Integer, parentRow as Integer) As Boolean		  //		End Function	#tag EndEvent	#tag Event		Function DragOver(x As Integer, y As Integer, obj As DragItem, action As Integer) As Boolean		  //		End Function	#tag EndEvent	#tag Event		Sub DragExit(obj As DragItem, action As Integer)		  //		End Sub	#tag EndEvent	#tag Event		Function DragEnter(obj As DragItem, action As Integer) As Boolean		  //		End Function	#tag EndEvent	#tag Event		Function CellTextPaint(g As Graphics, row As Integer, column As Integer, x as Integer, y as Integer) As Boolean		  //		End Function	#tag EndEvent	#tag Event		Function CellKeyDown(row as Integer, column as Integer, key as String) As Boolean		  //		End Function	#tag EndEvent	#tag Method, Flags = &h0		Function ActualRow(rbRow As Integer) As Integer		  //Takes an rb row and returns the actual row.		  //Returns -1 if there is no actual row		  		  If UBound(ActualRowDB) < rbRow Then Return -1		  		  Return ActualRowDB(rbRow)		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Function ParseTextAddition(strText As String, intMaxWidth As Integer, strFontType As String, intFontSize As Integer) As String()		  'We will add parsed comment lines to an string array, then we will use it as the method's return...		  Dim strCommentLines() as String		  		  'Clean up any leading or trailing spaces in the comment to make life simpler for the parser...		  strText = strText.Trim		  		  'Helper variables for the method...		  dim intLastPosition as Integer = 0 'Used to keep track of the last space position in the comment...		  Dim IntSpace as Integer = 0 'Used to keep track of position of space between words...		  Dim intTextWidth as Integer = 0 'Used to determine the width of a comment line...		  		  'Define a picture object to hold the text...		  Dim picString as Picture		  picString = New Picture(1, 1, 4) 'Initial size is not really important so I just specify 1, 1 here		  picString.Graphics.TextFont = strFontType		  picString.Graphics.TextSize = intFontSize		  		  Do		    'First, find the location of a space between words...		    intSpace = strtext.InStr(intLastPosition + 1, " ")		    If intSpace = 0 Then 'There are no more words left...		      intTextWidth = picString.Graphics.StringWidth(strText)		    Else		      intTextWidth = picString.Graphics.StringWidth(strText.Left(intSpace))		    End If		    		    'Write the string into the picture and determine how big it is...		    If intTextWidth > intMaxWidth Then 'whoops, string is too wide!		      strCommentLines.Append(strText.Left(intLastPosition).Trim)		      strText = strText.Mid(intLastPosition).Trim		      intSpace = 0		      intLastPosition = 0		    Else		      If intSpace = 0 Then		        Exit Do 'since there are no more words left, we can exit this loop...		      Else		        IntLastPosition = intSpace 'More words in the commeent so we need to keep parsing...		      End If		    End if		  Loop		  		  'If there is any remaining comment text, add it to the end now...		  If (strText.Len <> 0) Then		    strCommentLines.Append(strText)		  End If		  		  Return strCommentLines 'Comments are all parsed and returned as string array...		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub AddActualRow(item As String, columnNumber As Integer)		  Dim strings(), element As String		  		  //We dont need to mess with the date field so we select which field we are in		  Select Case columnNumber		  Case 0		    //Simply add the date		    Self.AddRow("")		    Cell(Self.LastIndex, 0) = item		    //Add a new actual row		    ActualRowCount = ActualRowCount + 1		    //Update actual row database		    ActualRowDB.Append(ActualRowCount)		  Case 1		    //Send the text to the parser.		    strings() = ParseTextAddition(item, Column(1).WidthActual, Self.TextFont, Self.TextSize)		    //Add a new actual row		    ActualRowCount = ActualRowCount + 1		    //Loop through and add each part of the array into a row.		    For Each element In strings		      Self.AddRow("")		      Self.Cell(Self.LastIndex, 1) = element		      //Update actual row database		      ActualRowDB.Append(ActualRowCount)		    Next		  Case 2		    //Same again		    strings() = ParseTextAddition(item, Column(2).WidthActual, Self.TextFont, Self.TextSize)		    ActualRowCount = ActualRowCount + 1		    For Each element In strings		      Self.AddRow("")		      Self.Cell(Self.LastIndex, 2) = element		      ActualRowDB.Append(ActualRowCount)		    Next		  End Select		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function ActualRowCount() As Integer		  Return ActualRowCount		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function rbRows(ActualRow As Integer) As Integer()		  //Returns the rbRows contained within the actual row supplied, in the form of a 0 based array of integers.		  Dim count, temp, ret() As Integer		  		  While count <= ActualRowDB.Ubound AND temp <= ActualRow		    temp = ActualRowDB(count)		    If temp = ActualRow Then ret.Append(count)		    		    count = count + 1		  Wend		  		  Return ret()		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub EditActualCell(text As string, Column As Integer, ActualRow As Integer)		  Dim Rows(), x As Integer		  DIm strings() As string		  		  //If there are not enough added rows then raise an out of bounds exception		  If ActualRow > ActualRowCount Then		    MsgBox("An Error occured, please report DGLBace6.")		    Return		  End If		  		  //Get the RB rows (and therefore cells that need to be edited		  Rows = rbRows(ActualRow)		  		  //Set them all to equal nothing		  For Each element As integer In Rows		    Cell(element, Column) = ""		  Next		  		  //Now parse up our text and add it to the columns.		  strings = ParseTextAddition(text, Column(Column).WidthActual, Self.TextFont, Self.TextSize)		  		  //Write the text.		  x = 0		  For Each element As String In strings		    Self.Cell(Rows(x), Column) = element		    x = x + 1		  Next		  		  //Adjust the row db, check the rows we had for all "" if so then remove it from the DB		  For x =Rows.Ubound DownTo 0		    If Cell(Rows(x), 0) = "" AND Cell(Rows(x), 1) = "" AND Cell(Rows(x), 2) = "" Then		      //Burn Row		      ActualRowDB.Remove(Rows(x))		    End If		  Next		  		  Self.Refresh		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function ReadActualCell(ActualRow As Integer, Column As Integer) As String		  Dim Rows() As Integer		  Dim ret, Strings() As String		  		  If ActualRow > ActualRowCount Then		    MsgBox("An Error occured, please report DGLBrac3.")		    Return ""		  End If		  		  //Find the rb rows		  Rows = rbRows(ActualRow)		  		  //Get the strings		  For Each Element As Integer In Rows		    Strings.Append(Self.Cell(Element, Column))		  Next		  		  //Join them into one string.		  ret = Join(strings)		  		  //Return it		  Return ret		End Function	#tag EndMethod	#tag Property, Flags = &h21		#tag Note			A comparison array for use in finding out the actual rows RBrow number.			Simply pass an rb row to it and it will present its actual row.		#tag EndNote		Private ActualRowDB(-1) As Integer	#tag EndProperty	#tag Property, Flags = &h21		Private ActualRowCount As Integer = 0	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="ControlOrder"			Visible=true			Group="Position"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			Type="String"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			Type="Integer"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			Type="Integer"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			Type="Integer"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="Width"			Visible=true			Group="Position"			InitialValue="100"			Type="Integer"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="Height"			Visible=true			Group="Position"			InitialValue="100"			Type="Integer"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="LockLeft"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="LockTop"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="LockRight"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="LockBottom"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="TabPanelIndex"			Group="Position"			InitialValue="0"			Type="Integer"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="Visible"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="HelpTag"			Visible=true			Group="Appearance"			Type="String"			EditorType="MultiLineEditor"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="AutoDeactivate"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="Enabled"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="ColumnCount"			Visible=true			Group="Appearance"			InitialValue="1"			Type="Integer"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="ColumnWidths"			Visible=true			Group="Appearance"			Type="String"			EditorType="MultiLineEditor"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="HasHeading"			Visible=true			Group="Appearance"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="UseFocusRing"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="InitialValue"			Visible=true			Group="Appearance"			Type="String"			EditorType="MultiLineEditor"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="HeadingIndex"			Visible=true			Group="Appearance"			InitialValue="-1"			Type="Integer"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="ScrollbarHorizontal"			Visible=true			Group="Appearance"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="ScrollBarVertical"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="GridLinesHorizontal"			Visible=true			Group="Appearance"			InitialValue="0"			Type="Integer"			EditorType="Enum"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="GridLinesVertical"			Visible=true			Group="Appearance"			InitialValue="0"			Type="Integer"			EditorType="Enum"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="DefaultRowHeight"			Visible=true			Group="Appearance"			InitialValue="-1"			Type="Integer"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="_ScrollWidth"			Visible=true			Group="Appearance"			InitialValue="-1"			Type="Integer"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="_ScrollOffset"			Visible=true			Group="Appearance"			InitialValue="0"			Type="Integer"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="TextFont"			Visible=true			Group="Font"			InitialValue="System"			Type="String"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="TextSize"			Visible=true			Group="Font"			InitialValue="0"			Type="Integer"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="Bold"			Visible=true			Group="Font"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="Italic"			Visible=true			Group="Font"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="Underline"			Visible=true			Group="Font"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="Hierarchical"			Visible=true			Group="Behavior"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="EnableDrag"			Visible=true			Group="Behavior"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="EnableDragReorder"			Visible=true			Group="Behavior"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="RequiresSelection"			Visible=true			Group="Behavior"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="SelectionType"			Visible=true			Group="Behavior"			InitialValue="0"			Type="Integer"			EditorType="Enum"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="ColumnsResizable"			Visible=true			Group="Behavior"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="AutoHideScrollbars"			Visible=true			Group="Behavior"			InitialValue="True"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="DataSource"			Visible=true			Group="Database Binding"			Type="String"			EditorType="DataSource"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="DataField"			Visible=true			Group="Database Binding"			Type="String"			EditorType="DataField"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="InitialParent"			InheritedFrom="Listbox"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass