#tag ModuleProtected Module AKCore	#tag Method, Flags = &h0		Function Bounds(Extends Item As RectControl) As AKRect		  dim r as AKRect		  r.left = item.left		  r.top = item.top		  r.width = item.width		  r.height = item.height		  return r		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Bounds(Extends Item As RectControl, Assigns NewRect As AKRect)		  item.width = newrect.width		  item.height = newrect.height		  item.top = newrect.top		  item.left = newrect.left		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function NewMoveTask(Extends Item As RectControl) As akmovetask		  dim task as akmovetask		  task = new akmovetask(item)		  return task		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Animate(Extends Item As RectControl, ToRect As AKRect, Duration As Double, EasingMethod As Integer = 0)		  dim task as akmovetask		  task = item.newmovetask		  task.duration = duration		  task.newrect = torect		  task.easingmethod = easingmethod		  		  task.run		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function Bounds(Extends Item As Window) As AKRect		  dim r as AKRect		  r.left = item.left		  r.top = item.top		  r.width = item.width		  r.height = item.height		  return r		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Bounds(Extends Item As Window, Assigns NewRect As AKRect)		  item.width = newrect.width		  item.height = newrect.height		  item.top = newrect.top		  item.left = newrect.left		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Animate(Extends Item As Window, ToRect As AKRect, Duration As Double, EasingMethod As Integer = 0)		  dim task as akmovetask		  task = item.newmovetask		  task.duration = duration		  task.newrect = torect		  task.easingmethod = easingmethod		  		  task.run		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function NewMoveTask(Extends Item As Window) As akmovetask		  dim task as akmovetask		  task = new akmovetask(item)		  return task		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function CreateRect(rTop As Integer, rLeft As Integer, rHeight As Integer, rWidth As Integer) As AKRect		  dim r as AKRect		  r.top = rtop		  r.left = rleft		  r.height = rheight		  r.width = rwidth		  return r		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Function FramePeriod() As Double		  return 1000000 / fps		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Run(Extends Task As AKTask)		  if animtimer = nil then		    Start		  end		  		  dim i as integer		  for i = 0 to ubound(tasks)		    if tasks(i).item = task.item then		      // we already have this one to work on		      tasks(i).nexttask = task		      return		    end		  next		  		  // the task in question does not already exist, so add it		  tasks.append task		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub Stop()		  animtimer.mode = timer.modeoff		  animtimer = nil		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub Start()		  if animtimer = nil then		    animtimer = new AKTimer		    animtimer.period = 10		    animtimer.mode = timer.modemultiple		  end		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function NewFrameTask(Extends Item As AKFrameTarget) As AKFrameTask		  dim task as akframetask		  task = new akframetask(item)		  return task		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Animate(Extends Item As AKFrameTarget, Frames() As Picture, Duration As Double, Looping As Boolean = True)		  dim task as akframetask		  task = item.newframetask		  task.frames = frames		  task.duration = duration		  task.looping = looping		  task.run		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Function SplitGraphic(Value As Picture, Width As Integer, Height As Integer) As Picture()		  dim results() as picture		  dim x,y as integer		  		  for x = 0 to value.width - width step width		    for y = 0 to value.height - height step height		      results.append picturepart(value,x,y,width,height)		    next		  next		  		  return results		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Function PicturePart(Source As Picture, X As Integer, Y As Integer, Width As Integer, Height As Integer) As Picture		  dim p as picture		  dim x1,y1 as integer		  dim start as double = microseconds		  		  p = newpicture(width,height,32)		  		  p.mask.graphics.drawpicture source.mask,0,0,width,height,x,y,width,height		  source.mask.graphics.forecolor = &c000000		  source.mask.graphics.fillrect x,y,width,height		  p.graphics.drawpicture source,0,0,width,height,x,y,width,height		  source.mask.graphics.drawpicture p.mask,x,y		  		  dim elapsed as double = microseconds - start		  		  return p		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Function ReverseFrames(Frames() As Picture) As Picture()		  dim results() as picture		  dim i as integer		  for i = ubound(frames) downto 0		    results.append frames(i)		  next		  return results		End Function	#tag EndMethod	#tag DelegateDeclaration, Flags = &h0		Delegate Sub AKCompletionDelegate(CompletedTask As AKTask)	#tag EndDelegateDeclaration	#tag Method, Flags = &h0		Sub Cancel(Extends Task As AKTask)		  dim i as integer		  for i = ubound(tasks) downto 0		    if tasks(i) = task then		      tasks.remove i		    end		  next		End Sub	#tag EndMethod	#tag Property, Flags = &h21		Private AnimTimer As AKTimer	#tag EndProperty	#tag Property, Flags = &h1		Protected Tasks() As AKTask	#tag EndProperty	#tag Property, Flags = &h1		Protected FPS As Integer = 32	#tag EndProperty	#tag Structure, Name = AKRect, Flags = &h0		Left As Integer		  Top As Integer		  Width As Integer		Height As Integer	#tag EndStructure	#tag ViewBehavior		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Module#tag EndModule