#tag ModuleProtected Module Preferences	#tag Method, Flags = &h0		Sub WritePrefs()		  //Write the prefs to BitClamp.BCPrefs in the users preferences folder,		  		  Dim fPrefs as FolderItem		  Dim stream as TextOutputStream		  		  fPrefs = GetFolderItem(PreferencesFolder.ShellPath + "/BitClamp.BC_PREFS", FolderItem.PathTypeShell)		  		  If fPrefs <> Nil Then		    //create and open stream		    stream = fPrefs.CreateTextFile		    		    //write prefs data		    stream.WriteLine "<AskMimic>" + str(AskMimic) + "</AskMimic>"		    stream.WriteLine "<BounceDockIcon>" + str(BounceDockIcon) + "</BounceDockIcon>"		    stream.WriteLine "<Compress>" + str(Compress) + "</Compress>"		    stream.WriteLine "<ConfirmKey>" + str(ConfirmKey) + "</ConfirmKey>"		    stream.WriteLine "<DecryptReminder>" + str(DecryptReminder) + "</DecryptReminder>"		    		    Select Case DefaultEncryptionType		    Case "Blowfish"		      stream.WriteLine "<DefaultEncryptionType>0</DefaultEncryptionType>"		    Case "Serpent"		      stream.WriteLine "<DefaultEncryptionType>1</DefaultEncryptionType>"		    Case "AES"		      stream.WriteLine "<DefaultEncryptionType>2</DefaultEncryptionType>"		    End Select		    stream.WriteLine "<DefaultFileExtension>" + DefaultFileExtension + "</DefaultFileExtension>"		    stream.WriteLine "<DefaultFileName>" + DefaultFileName + "</DefaultFileName>"		    stream.WriteLine "<DestinationFolder>" + DestinationFolder.ShellPath+ "</DestinationFolder>"		    stream.WriteLine "<EnableMimics>" + str(EnableMimics)+ "</EnableMimics>"		    stream.WriteLine "<EnablePasswordLogging>" + str(EnablePasswordLogging)+ "</EnablePasswordLogging>"		    stream.WriteLine "<GrowlEnabled>" + str(GrowlEnabled) + "</GrowlEnabled>"		    stream.WriteLine "<GrowlRegistered>" + str(GrowlRegistered) + "</GrowlRegistered>"		    If MimicFile <> Nil Then		      stream.WriteLine "<MimicFile>" + MimicFile.ShellPath + "</MimicFile>"		    Else		      stream.WriteLine "<MimicFile>NIL</MimicFile>"		    End If		    stream.WriteLine "<Overwrite>" + str(Overwrite) + "</Overwrite>"		    stream.WriteLine "<pGenCases>" + str(pGenCases) + "</pGenCases>"		    stream.WriteLine "<pGenClipboard>" + str(pGenClipboard) + "</pGenClipboard>"		    stream.WriteLine "<pGenNums>" + str(pGenNums) + "</pGenNums>"		    stream.WriteLine "<pGenSymbols>" + str(pGenSymbols) + "</pGenSymbols>"		    stream.WriteLine "<pLeft>" + str(pLeft) + "</pLeft>"		    stream.WriteLine "<pTop>" + str(pTop) + "</pTop>"		    stream.WriteLine "<ShowPasswordStrength>"+str(ShowPasswordStrength) + "</ShowPasswordStrength>"		    stream.WriteLine "<UserGuidePath>" + UserGuidePath + "</UserGuidePath>"		    		    		    //Write number of extensions		    stream.WriteLine "<ExtensionNumber>" + str(UBound(Extensions)) + "</ExtensionNumber>"		    //Write extensions		    For i as Integer = 0 To UBound(Extensions)		      stream.WriteLine "<Extension>" + Extensions(i) + "</Extension>"		    Next		    //close stream		    stream.close		  End If		  		  		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub ReadPrefs()		  #Pragma DisableBackgroundTasks		  		  Dim fPrefs As FolderItem = PreferencesFolder.Child("BitClamp.BC_PREFS")		  Dim stream As TextInputStream		  Dim input As String		  Dim temp As variant		  		  If fPrefs.Exists Then		    //Open preferences file and dump the contents into a string.		    stream = fPrefs.OpenAsTextFile		    input = stream.ReadAll		    stream = fPrefs.OpenAsTextFile		    //Find extensions		    Dim extensionNumber As Integer		    While extensionNumber = 0		      extensionNumber = val(ParseLine(stream.ReadLine, "ExtensionNumber"))		    Wend		    For x as Integer = 0 To extensionNumber		      Extensions.Append(ParseLine(Stream.ReadLine, "Extension"))		    Next		    		    Stream.Close		    		    //temp now scrolls through and allocates each preference if it is stored in the preferences file.		    '##Wish I could put this in a loop, cant think how.		    		    temp = ParseLine(input, "AskMimic")		    If temp <> "" Then		      AskMimic = temp		    End If		    		    temp = ParseLine(input, "BounceDockIcon")		    If temp <> "" Then		      BounceDockIcon = temp		    End If		    		    temp = ParseLine(input, "Compress")		    If temp <> "" Then		      Compress = temp		    End If		    		    temp = ParseLine(input, "ConfirmKey")		    If temp <> "" Then		      ConfirmKey = temp		    End If		    		    temp = ParseLine(input, "DecryptReminder")		    If temp <> "" Then		      DecryptReminder = temp		    End If		    		    temp = ParseLine(input, "DefaultEncryptionType")		    If temp <> "" Then		      Select Case Val(temp)		      Case 0		        DefaultEncryptionType = "Blowfish"		      Case 1		        DefaultEncryptionType = "Serpent"		      Case 2		        DefaultEncryptionType = "AES"		      End Select		    End If		    		    temp = ParseLine(input, "DefaultFileExtension")		    If temp <> "" Then		      DefaultFileExtension = temp		    End If		    		    temp = ParseLine(input, "DefaultFileName")		    If temp <> "" Then		      DefaultFileName = temp		    End If		    		    temp = ParseLine(input, "DestinationFolder")		    If temp <> "" Then		      DestinationFolder = GetFolderItem(temp, Folderitem.PathTypeShell)		    End If		    		    temp = ParseLine(input, "EnableMimics")		    If temp <> "" Then		      EnableMimics = temp		    End If		    		    temp = ParseLine(input, "EnablePasswordLogging")		    If temp <> "" Then		      EnablePasswordLogging = temp		    End If		    		    temp = ParseLine(input, "GrowlEnabled")		    If temp <> "" Then		      GrowlEnabled = temp		    End If		    		    temp = ParseLine(input, "GrowlRegistered")		    If temp <> "" Then		      GrowlRegistered = temp		    End If		    		    temp = ParseLine(input, "MimicFile")		    If temp <> "" Then		      If temp = "NIL" Then		        MimicFile = Nil		      Else		        MimicFile = GetFolderItem(temp, FolderItem.PathTypeShell)		      End If		    End If		    		    temp = ParseLine(input, "Overwrite")		    If temp <> "" Then		      Overwrite = temp		    End If		    		    temp = ParseLine(input, "pGenCases")		    If temp <> "" Then		      pGenCases = temp		    End If		    		    temp = ParseLine(input, "pGenClipboard")		    If temp <> "" Then		      pGenClipboard = temp		    End If		    		    temp = ParseLine(input, "pGenNums")		    If temp <> "" Then		      pGenNums = temp		    End If		    		    temp = ParseLine(input, "pGenSymbols")		    If temp <> "" Then		      pGenSymbols = temp		    End If		    		    temp = ParseLine(input, "pLeft")		    If temp <> "" Then		      pLeft = temp		    End If		    		    temp = ParseLine(input, "pTop")		    If temp <> "" Then		      pTop = temp		    End If		    		    temp = ParseLine(input, "ShowPasswordStrength")		    If temp <> "" Then		      ShowPasswordStrength = temp		    End If		    		    temp = ParseLine(input, "UserGuidePath")		    If temp <> "" Then		      UserGuidePath = temp		    End If		    		    		    //If we didnt get a valid folderitem then we catch it here to avoid all sorts of hell		    If DestinationFolder = NIL OR DestinationFolder.DisplayName = "BitClamp" then		      DestinationFolder = DesktopFolder		    End If		  Else		    //If there isnt a preferences file then we use the default extensions and the DestinationFolder is the default location.		    useDefaultExtensions		    DestinationFolder = DesktopFolder		  End If		  		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function ParseLine(Line as string, name as string) As String		  Dim Start, Finish As Integer = 0		  		  Start = InStr(Line,"<" + Name + ">") + Len(Name) + 2		  Finish = InStr(Line,"</" + Name + ">")		  		  Return Mid(Line, Start, Finish - Start)		  		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub useDefaultExtensions()		  //This fills in the extensions included with BitClamp into the Extensions() array		  //Unfortunately this is going to be a very boring method.		  Extensions.Append(".doc")		  Extensions.Append(".docx")		  Extensions.Append(".txt")		  Extensions.Append(".rtf")		  Extensions.Append(".ppt")		  Extensions.Append(".xls")		  Extensions.Append(".mp3")		  Extensions.Append(".jpg")		  Extensions.Append(".png")		  Extensions.Append(".mov")		  Extensions.Append(".mp4")		  Extensions.Append(".avi")		  Extensions.Append(".cdx")		  		  		  		  		  		  		  		  		  		End Sub	#tag EndMethod	#tag Property, Flags = &h1		#tag Note			The default encryption type. Stored in the file as an integer for safety.		#tag EndNote		Protected DefaultEncryptionType As String = "Blowfish"	#tag EndProperty	#tag Property, Flags = &h1		#tag Note			Whether the user wishes to receive growl notifications from the program.		#tag EndNote		Protected GrowlEnabled As Boolean = True	#tag EndProperty	#tag Property, Flags = &h1		#tag Note			Whether the program has been registered with Growl.		#tag EndNote		Protected GrowlRegistered As Boolean = False	#tag EndProperty	#tag Property, Flags = &h1		#tag Note			Whether the UI asks the user if he wants to decrypt.		#tag EndNote		Protected DecryptReminder As Boolean = True	#tag EndProperty	#tag Property, Flags = &h1		#tag Note			Stores the target where the user wants the files to be saved to.		#tag EndNote		Protected DestinationFolder As FolderItem	#tag EndProperty	#tag Property, Flags = &h1		#tag Note			Holds the default file name for the encrypted data to be saved as.		#tag EndNote		Protected DefaultFileName As String = "EncryptedFile"	#tag EndProperty	#tag Property, Flags = &h1		#tag Note			Holds the extensions that will appear in the preferences screen.		#tag EndNote		Protected Extensions() As String	#tag EndProperty	#tag Property, Flags = &h1		#tag Note			Holds whether or not the dock icon is bounced (once) on a task being completed.		#tag EndNote		Protected BounceDockIcon As Boolean = True	#tag EndProperty	#tag Property, Flags = &h1		#tag Note			Whether or not the user wants to show the password strength floating window.		#tag EndNote		Protected ShowPasswordStrength As Boolean = False	#tag EndProperty	#tag Property, Flags = &h1		#tag Note			Stores whether of not the user wishes BitClamp to compress its files.		#tag EndNote		Protected Compress As Boolean = True	#tag EndProperty	#tag Property, Flags = &h1		#tag Note			Holds the default extension.		#tag EndNote		Protected DefaultFileExtension As String = "cdx"	#tag EndProperty	#tag Property, Flags = &h1		#tag Note			Holds the position on the screen of the window when the app quits.		#tag EndNote		Protected pLeft As Integer = -1	#tag EndProperty	#tag Property, Flags = &h1		#tag Note			Holds the position on the screen of the window when the app quits.,,		#tag EndNote		Protected pTop As Integer = -1	#tag EndProperty	#tag Property, Flags = &h1		#tag Note			The path to the User Guide, held as a string here for greater flexibility.		#tag EndNote		Protected UserGuidePath As String = "/UserGuide.pdf"	#tag EndProperty	#tag Property, Flags = &h1		#tag Note			Holds whether or not the user wishes to confirm his password on each encryprt. True by Default.		#tag EndNote		Protected ConfirmKey As Boolean = True	#tag EndProperty	#tag Property, Flags = &h1		#tag Note			Holds whether the user wishes to overwrite the files that they are encrypting/decrypting.		#tag EndNote		Protected Overwrite As Boolean = False	#tag EndProperty	#tag Property, Flags = &h1		#tag Note			Holds whether or not the user wishes to use file mimics.		#tag EndNote		Protected EnableMimics As Boolean = False	#tag EndProperty	#tag Property, Flags = &h1		#tag Note			Holds whether the user wants to be asked which file to mimic for each encrypt.		#tag EndNote		Protected AskMimic As Boolean = True	#tag EndProperty	#tag Property, Flags = &h1		#tag Note			This is the folderitem that the user wants to always be mimicked.		#tag EndNote		Protected MimicFile As Folderitem	#tag EndProperty	#tag Property, Flags = &h1		#tag Note			Holds whether the password generator automatically checks the Upper and lower case checkbox.		#tag EndNote		Protected pGenCases As Boolean = True	#tag EndProperty	#tag Property, Flags = &h1		#tag Note			Holds whether the password generator automatically checks the numbers checkbox.		#tag EndNote		Protected pGenNums As Boolean = True	#tag EndProperty	#tag Property, Flags = &h1		#tag Note			Holds whether the password generator automatically checks the Symbols checkbox.		#tag EndNote		Protected pGenSymbols As Boolean = True	#tag EndProperty	#tag Property, Flags = &h1		#tag Note			Holds whether the password generator automatically checks clipboard checkbox.		#tag EndNote		Protected pGenClipboard As Boolean = True	#tag EndProperty	#tag Property, Flags = &h1		#tag Note			Holds whether or not the user wishes to log his/her paswords.		#tag EndNote		Protected EnablePasswordLogging As Boolean = False	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Module#tag EndModule