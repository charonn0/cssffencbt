#tag ModuleProtected Module Globals	#tag Method, Flags = &h0		Sub CarbonBringAllWindowsToFront()		  // Modified 2/3/2002 by Kevin Ballard		  		  // 68k Compatible		  		  dim m as memoryBlock		  dim err as integer		  		  #if TargetMacOS then		    Declare Function SetFrontProcess Lib "Carbon" (PSN as ptr) as Integer		    		    		    m = GetCurrentProcess		    		    err = SetFrontProcess(m)		  #endif		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function GetCurrentProcess() As MemoryBlock		  // Added 12/15/2001 by Kevin Ballard		  // Modified on 12/16/2001 by Jarvis Badgley		  // Modified 2/3/2002 by Kevin Ballard		  // Modified 2/11/2002 by Kevin Ballard		  		  // 68k Compatible		  		  #if TargetMacOS then		    Declare Sub GetMe lib "Carbon" Alias "GetCurrentProcess" (PSN As Ptr)		    		    		    // Returns the reference to the current process		    		    Dim proc As MemoryBlock, err as integer		    		    proc = NewMemoryBlock(8)		    		    GetMe proc		    		    Return proc		  #endif		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub NotifyStart(text as string)		  // Added 11/25/2001 by Jarvis Badgley		  		  // 68k Compatible		  		  #if TargetMacOS		    		    dim err As integer		    if NotificationHandle=nil then		      NotificationHandle=newMemoryBlock(36)		      NotificationFlag=false		    end		    if NotificationFlag then		      return		    end		    NotificationFlag=true		    		    NotificationHandle.short(4) = 8		    NotificationHandle.short(14) = 1		    NotificationHandle.long(16) = 0		    NotificationHandle.long(20) = 0		    NotificationHandle.long(28) = 0		    NotificationHandle.long(32) = 0		    		    if text = "" then		      NotificationHandle.long(24) = 0		    else		      Notify_messageHolder = NewMemoryBlock(len(text) + 1)		      Notify_messageHolder.pstring(0) = text		      		      NotificationHandle.ptr(24) = Notify_messageHolder		    end if		    		    Declare Function NMInstall Lib "Carbon" (nmReqPtr as Ptr) as Short		    		    		    err= NMInstall(NotificationHandle)		    		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub NotifyStop()		  // Added 11/25/2001 by Jarvis Badgley		  // Modified 12/19/02 by Kevin Ballard		  		  		  #if TargetMacOS		    		    dim err as integer		    		    Declare Function NMRemove Lib "Carbon" (nmReqPtr as Ptr) as Short Inline68K("205FA05F3E80")		    		    		    if NotificationHandle<>nil and NotificationFlag then		      err= NMRemove(NotificationHandle)		    end		    NotificationFlag=false		    		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub PostGrowl(Notification As String)		  //Posts notification depending on the		  Dim n As New GrowlNotificationMBS		  		  n.Name = Notification		  n.Title = Notification + "!"		  Select Case Notification		  Case "Encryption Finished"		    n.Description = "Your encryption has finished successfully."		  Case "Decryption Finished"		    n.Description = "Your decryption has finished successfully."		  Case "Encryption Error"		    n.Description = "An error was encountered during the encryption process."		  Case "Decryption Error"		    n.Description = "An error was encountered during the decryption process."		  End Select		  		  n.PostNotification		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub CarbonResize(w as window, width as integer, height as integer, align as integer)		  // Added 11/13/2001 by Jarvis Badgley		  // Edited 12/05/2001 by Jarvis Badgley		  // Modified 2/3/2002 by Kevin Ballard		  // ---		  // Rewritten 2/22/2002 by Kevin Ballard		  // Based off of code by Jean-Francois Roy <bahamut@mac.com>		  // ---		  // Modified 8/23/02 by Kevin Ballard		  // Modified 12/14/02 by Pedro fp <mail@pedro.net.au>		  // Modified 12/14/02 by Kevin Ballard		  //		  // Align numbers:		  //     0) Lock upper left		  //     1) Lock upper right		  //     2) Lock lower left		  //     3) Lock lower right		  //     4) Lock top center		  //     5) Lock left center		  //     6) Lock bottom center		  //     7) Lock right center		  		  #if TargetMacOS		    		    dim err, t, l as integer		    dim rect as MemoryBlock		    		    Declare Function TransitionWindow Lib "Carbon" (window as WindowPtr, effect as Integer, action as Integer, rect as Ptr) as Integer		    Declare Function GetWindowBounds  Lib "Carbon" (window As WindowPtr, regionCode As Integer, globalBounds As Ptr) as Integer		    		    		    // we get the old window region		    rect = NewMemoryBlock(8)		    err = GetWindowBounds(w, 32, rect)		    		    t = w.Top // Need to know where the top and left of the window go		    l = w.Left		    Select Case align // Use deltas in measurements, not absolutes		    Case 0 // Lock upper left		      rect.Short(4) = rect.Short(4) + (height - w.height)		      rect.Short(6) = rect.Short(6) + (width - w.width)		    Case 1 // Lock upper right		      rect.Short(2) = rect.Short(2) - (width - w.width)		      rect.Short(4) = rect.Short(4) + (height - w.height)		      l = l - (width - w.width) // Left side moves		    Case 2 // Lock lower left		      rect.Short(0) = rect.Short(0) - (height - w.height)		      rect.Short(6) = rect.Short(6) + (width - w.width)		      t = t - (height - w.height) // Top side moves		    Case 3 // Lock lower right		      rect.Short(0) = rect.Short(0) - (height - w.height)		      rect.Short(2) = rect.Short(2) - (width - w.width)		      t = t - (height - w.height) // Top side moves		      l = l - (width - w.width) // Left side moves		    Case 4 // Lock top center		      rect.Short(2) = rect.Short(2) - (width - w.width) / 2		      rect.Short(4) = rect.Short(4) + (height - w.height)		      rect.Short(6) = rect.Short(6) + (width - w.width) / 2		      l = l - (width - w.width)/2 // Both sides move		    Case 5 // Lock left center		      rect.Short(0) = rect.Short(0) - (height - w.height) / 2		      rect.Short(4) = rect.Short(4) + (height - w.height) / 2		      rect.Short(6) = rect.Short(6) + (width - w.width)		      t = t - (height - w.height) / 2 // Top moves		    Case 6 // Lock bottom center		      rect.Short(0) = rect.Short(0) - (height - w.height)		      rect.Short(2) = rect.Short(2) - (width - w.width) / 2		      rect.Short(6) = rect.Short(6) + (width - w.width) / 2		      t = t - (height - w.height) // Top moves		      l = l - (width - w.width) / 2 // Left moves		    Case 7 // Lock right center		      rect.Short(0) = rect.Short(0) - (height - w.height) / 2		      rect.Short(2) = rect.Short(2) - (width - w.width)		      rect.Short(4) = rect.Short(4) + (height - w.height) / 2		      t = t - (height - w.height) / 2// Top moves		      l = l - (width - w.width) // Left moves		    End Select // If none of these, don't change		    		    // transition		    err = TransitionWindow(w, 3, 4, rect)		    		    // have to manually set the window's new height after resizing the window		    w.Top = t		    w.Left = l		    w.Width = width		    w.Height = height		    		    w.refresh		    		  #endif // Target68k		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub InitializeSparkle()		  //Set the appcast feed depending on whether or not it is a beta build.		  #If BitClamp.IsBetaBuild Then		    Sparkle.UserDefault("SUFeedURL") = "http://www.BitClamp.com/BitClampBetas.xml"		  #Else		    Sparkle.UserDefault("SUFeedURL") = "http://www.BitClamp.com/BitClampAppCast.xml"		  #EndIf		  //Initialize the sparkle framework depending on whether or not we are debugging and set user defaults.		  #If DebugBuild Then		    Dim SparkleFrameworkLocation As FolderItem = App.ExecutableFile.Parent.Parent.Parent.Parent.Child("Frameworks").Child("Sparkle.framework")		    Sparkle.Initialize(SparkleFrameworkLocation)		  #Else		    Sparkle.Initialize()		  #EndIf		  		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function ThemeColor(ID As Integer) As Color		  #if targetMacOS then		    dim colorPtr as MemoryBlock		    dim OSErr as Integer		    		    Const depth = 32		    		    Declare Function GetThemeBrushAsColor Lib "Carbon" (inColor as Integer,_		    inDepth as Short, inColorDev as Boolean, outColor as Ptr) as Integer		    		    colorPtr = NewMemoryBlock(6)		    OSErr = GetThemeBrushAsColor(ID, depth, true, colorPtr)		    If OSErr = 0 then Return RGB(colorPtr.UShort(0)\255, colorPtr.UShort(2)\255, colorPtr.UShort(4)\255)		  #Else		    //If windows we want white and blue		    If ID = ListRowColorEven Then		      Return &cFFFFFF		    Else		      Return &cEDF2FD		    End If		  #endif		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function ParseLine(Line as string, name as string) As String		  Dim Start, Finish As Integer = 0		  		  Start = InStr(Line,"<" + Name + ">") + Len(Name) + 2		  Finish = InStr(Line,"</" + Name + ">")		  		  Return Mid(Line, Start, Finish - Start)		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function SavePasswordLog() As Boolean		  //Check to see whether there is any new data to save, otherwise dont.		  If UBound(DateToLog) < 0 Then		    Return True		  End If		  If suppliedLogPassword = "" Then		    //Check the keychain		    Dim itemToFind As New KeyChainItem		    itemToFind.ServiceName = "BitClamp"		    Try		      suppliedLogPassword = System.KeyChain.FindPassword(itemToFind)		    Catch kex As KeyChainException		    End Try		    If suppliedLogPassword = "" Then		      wLogPassword.Show		      Return False		    End If		  End If		  		  //Open password window and return		  //Load in old data to an array.		  Dim pwrdLog As FolderItem = SpecialFolder.ApplicationData.Child("BitClamp").Child("PasswordLog.bclog")		  		  Dim itemCount As integer		  Dim hasher As NEW SHA_512		  Dim check As String		  Dim saveData() As String		  Dim block As New MemoryBlock(0)		  Dim Mike, Bob As BlowfishCBC		  		  // Get password hash and check that the supplied one is correct.		  hasher.Update(suppliedLogPassword)		  check = hasher.Final		  		  Dim stream As BinaryStream		  		  //Attempt to open the file.		  stream = pwrdLog.OpenAsBinaryFile		  		  If stream = Nil Then //If we have neither files we don't need to save one. Therefore return true now.		    If pwrdLog = Nil Then		      Return True		    Else		      System.Log(System.LogLevelWarning, "BitClamp canot write to Application Support directory.")		      Return False		    End If		  End If		  //Check the password hash.		  If check <> stream.ReadPString Then		    //something has gone wrong and we have the wrong password so ask for the log password.		    wLogPassword.Show		    Return True		  End If		  		  Mike = New BlowfishCBC(suppliedLogPassword)		  		  //Get the amount of items.		  itemCount = stream.ReadInt32		  		  //Read and decrypt the data into a memory block.		  //NOTE: The entire file will be loaded into memory, this may need refactoring if logs get truley huge.		  While NOT stream.EOF		    Block = Block + Mike.Decrypt(stream.Read(8000))		    App.YieldToNextThread		  Wend		  Block = Block + Mike.FinishDecrypt()		  Mike = Nil		  stream.Close		  		  //Read in data into an array.		  stream = New BinaryStream(Block)		  Dim temp As String		  While NOT stream.EOF		    temp = stream.ReadPString		    If temp <> "" Then		      saveData.Append(temp)		    End If		  Wend		  stream.Close		  		  stream = TemporaryFolder.Child("tempLog.bclog").CreateBinaryFile("")		  		  For each Element As String In saveData		    stream.WritePString(Element)		  Next		  		  //Add on the new passwords.		  For i As integer = 0 To UBound(DateToLog)		    stream.WritePString(DateToLog(i))		    stream.WritePString(EncryptedFilesToLog(i))		    stream.WritePString(PasswordToLog(i))		  Next		  stream.Position = 0		  Block = stream.Read(stream.Length)		  		  //Encrypt the data.		  Bob = New BlowfishCBC(suppliedLogPassword)		  Block = Bob.Encrypt(Block) + Bob.FinishEncrypt()		  		  stream.Close		  		  //Create the new file		  stream = pwrdLog.CreateBinaryFile("")		  If stream = Nil Then		    MsgBox "There was an error when saving the password log, it may have been corrupted. Please report error #Gspl84."		    Return False		  End If		  		  //Write data.		  stream.WritePstring(check) 'Write the hash		  Dim newCount As integer = itemCount + DateToLog.Ubound + 1		  stream.WriteInt32(newCount) 'write the amount of items		  		  stream.Write(Block) 'write the encryped data.		  		  stream.Close		  TemporaryFolder.Child("tempLog.bclog").Delete		  		  Return True		  		  		  		  		  		  		  		  		  		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetUserName(useShortName As Boolean) As String		  // Created by Charles Yeomans <yeomans@desuetude.com>		  // Added by Kevin Ballard on 2/28/04		  		  dim m as MemoryBlock		  dim theName as String		  #if TargetCarbon		    dim stringRef as Integer		    dim L as Integer		  #endif		  		  Const kCFStringEncodingUnicode = &h0100		  		  #if TargetCarbon		    #if TargetMachO		      Const kCarbon = "/System/Library/Frameworks/Carbon.Framework/Carbon"		    #else		      Const kCarbon = "Carbon"		    #endif		  #endif		  		  #if TargetCarbon		    Declare Function CSCopyUserName Lib kCarbon (useShortName as Boolean) as Integer		    Declare Function CFStringGetLength Lib kCarbon (theString as Integer) as Integer		    Declare Function CFStringGetCString Lib kCarbon (theString as Integer, buffer as Ptr, bufferSize as Integer, enc as Integer) as Boolean		    Declare Sub CFRelease Lib kCarbon (theRef as Integer)		  #endif		  		  #if TargetCarbon		    stringRef = CSCopyUserName(useShortName)		    If stringRef <> 0 then		      L = CFStringGetLength(stringRef)		      m = New MemoryBlock(2*L + 1)		      If CFStringGetCString(stringRef, m, m.Size, kCFStringEncodingUnicode) then		        theName = DefineEncoding(m.StringValue(0, 2*L), Encodings.UTF16)		      Else //a problem occurred		        theName = ""		      End if		    Else  //a problem occurred		      theName = ""		    End if		  #endif		  		  #if TargetPPC		    m = new MemoryBlock(32)		    m.StringValue(0, 32) = app.ResourceFork.GetResource("STR ", -16413)		    theName = DefineEncoding(m.PString(0), Encodings.SystemDefault)		  #endif		  		Finally		  #if TargetCarbon		    If stringRef <> 0 then		      CFRelease stringRef		    End if		  #endif		  Return theName		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub saveToKeychain(password As String)		  Dim kci As New KeyChainItem		  Dim nkci As New KeyChainItem		  kci.ServiceName = "BitClamp"		  kci.Delete		  nkci.AccountName = GetUserName(False)		  nkci.Description = "The password for BitClamp's Password Log."		  nkci.ServiceName = "BitClamp"		  System.Keychain.AddPassword(nkci, password)		  		Exception err As KeyChainException		  MsgBox("An error occured when trying to access the keychain, please report: #KCstk" + str(err.ErrorNumber))		  		End Sub	#tag EndMethod	#tag Property, Flags = &h0		enc As BCEncryptor	#tag EndProperty	#tag Property, Flags = &h0		arc As DGTarShell	#tag EndProperty	#tag Property, Flags = &h0		DoingEncrypt As Boolean	#tag EndProperty	#tag Property, Flags = &h0		Checker As BCTagger	#tag EndProperty	#tag Property, Flags = &h0		arch As ZipThread	#tag EndProperty	#tag Property, Flags = &h0		CurrentEncryptionType As String	#tag EndProperty	#tag Property, Flags = &h0		#tag Note			Expiry Date		#tag EndNote		ed As Date	#tag EndProperty	#tag Property, Flags = &h0		#tag Note			Days remaining		#tag EndNote		dr As Integer	#tag EndProperty	#tag Property, Flags = &h0		#tag Note			Serial Number		#tag EndNote		sn As String	#tag EndProperty	#tag Property, Flags = &h0		#tag Note			Days left		#tag EndNote		dl As Integer	#tag EndProperty	#tag Property, Flags = &h0		Flag As Boolean = False	#tag EndProperty	#tag Property, Flags = &h0		#tag Note			Stores the items that are to be encrypted in an array.		#tag EndNote		Items() As Folderitem	#tag EndProperty	#tag Property, Flags = &h0		regName As String	#tag EndProperty	#tag Property, Flags = &h0		NotificationFlag As boolean	#tag EndProperty	#tag Property, Flags = &h0		NotificationHandle As memoryBlock	#tag EndProperty	#tag Property, Flags = &h0		Notify_MessageHolder As MemoryBlock	#tag EndProperty	#tag Property, Flags = &h0		#tag Note			False = Registered			True = Demo		#tag EndNote		TrialMode As Boolean = True	#tag EndProperty	#tag Property, Flags = &h0		Growl As GrowlMBS	#tag EndProperty	#tag Property, Flags = &h0		#tag Note			Holds the file name (including extension that the output file is going to be called (if the overwrite preference is not in use).		#tag EndNote		CurrentFileName As String	#tag EndProperty	#tag Property, Flags = &h0		currentMimic As FolderItem	#tag EndProperty	#tag Property, Flags = &h0		#tag Note			Holds the position of the tag in the current mimicked file that is to be decrypted.		#tag EndNote		CurrentTagLocation As UInt64	#tag EndProperty	#tag Property, Flags = &h0		#tag Note			array of data that needs to be added to the log when it is next opened.		#tag EndNote		PasswordToLog(-1) As String	#tag EndProperty	#tag Property, Flags = &h0		DateToLog(-1) As String	#tag EndProperty	#tag Property, Flags = &h0		EncryptedFilesToLog(-1) As String	#tag EndProperty	#tag Property, Flags = &h0		swKeyOpen As Boolean = False	#tag EndProperty	#tag Property, Flags = &h0		suppliedLogPassword As String	#tag EndProperty	#tag Property, Flags = &h0		wPrefsOpen As Boolean	#tag EndProperty	#tag Constant, Name = ListRowColorEven, Type = Double, Dynamic = False, Default = \"56", Scope = Public	#tag EndConstant	#tag Constant, Name = ListRowColorOdd, Type = Double, Dynamic = False, Default = \"57\r", Scope = Public	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="DoingEncrypt"			Group="Behavior"			InitialValue="0"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="CurrentEncryptionType"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="dr"			Group="Behavior"			InitialValue="0"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="sn"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="dl"			Group="Behavior"			InitialValue="0"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="RegName"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="Flag"			Group="Behavior"			InitialValue="False"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="NotificationFlag"			Group="Behavior"			InitialValue="0"			Type="boolean"		#tag EndViewProperty		#tag ViewProperty			Name="TrialMode"			Group="Behavior"			InitialValue="0"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="CurrentFileName"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="swKeyOpen"			Group="Behavior"			InitialValue="False"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="suppliedLogPassword"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"		#tag EndViewProperty	#tag EndViewBehaviorEnd Module#tag EndModule