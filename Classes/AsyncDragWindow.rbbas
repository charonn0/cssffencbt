#tag ClassProtected Class AsyncDragWindowInherits Window	#tag Event		Sub Open()		  		  #if TargetMacOS then		    		    Declare Sub ChangeWindowAttributes Lib kLibraryCarbon (windowRef As Integer, setTheseAttributes As Integer, clearTheseAttributes As Integer)		    		    Const kWindowNoAttributes = 0		    Const kWindowAsyncDragAttribute = 8388608		    Const kWindowStandardHandlerAttribute = 33554432		    		    Dim ex As RuntimeException		    		    ' I haven't got a clue how RS handles windows in the framework,		    ' so this class is likely pushing things as it is, but real bad		    ' mojo happens if it's used on a non-composite metal window.		    if self.Frame = Window.FrameTypeMetal AND NOT self.Composite then		      ex = New RuntimeException		      ex.Message = "AsyncDragWindows with metal frames must be composite."		      Raise ex		    end if		    		    ChangeWindowAttributes(self.Handle, kWindowAsyncDragAttribute, kWindowNoAttributes)		    InstallEventHandler(self)		    		    lastLeft = Left		    lastTop = Top		    		  #endif		  		  RaiseEvent Open		End Sub	#tag EndEvent	#tag Event		Sub Close()		  		  #if TargetMacOS then		    		    Declare Function RemoveEventHandler Lib kLibraryCarbon (inHandlerRef As Integer) As Integer		    		    if carbonEventRef <> 0 then		      Call RemoveEventHandler(carbonEventRef)		      carbonEventRef = 0		    end if		    		    CleanUp(self)		    		  #endif		  		  RaiseEvent Close		End Sub	#tag EndEvent	#tag Event		Sub Moved()		  		  ' Overridden...		  		  ' When async dragging is enabled this event fires whenever the		  ' mouse stops, rather than when the drag is actually finished.		  		  #if NOT TargetMacOS then		    		    RaiseEvent Moved		    		  #endif		End Sub	#tag EndEvent	#tag Method, Flags = &h21		Private Shared Sub InstallEventHandler(w As AsyncDragWindow)		  		  #if TargetMacOS then		    		    ' Register event handlers for a window instance		    		    Declare Function NewEventHandlerUPP Lib kLibraryCarbon (userRoutine As Ptr) As Integer		    Declare Function InstallEventHandler Lib kLibraryCarbon (inTarget As Integer, inHandler As Integer, _		    inNumTypes As Integer, inList As Ptr, inUserData As Integer, ByRef handlerRef As Integer) As Integer		    Declare Function GetWindowEventTarget Lib kLibraryCarbon (inWindow As Integer) As Integer		    		    Dim eventref As Integer		    		    winID = winID + 1		    		    if winEventList = Nil then		      winEventList = NewMemoryBlock(32)		      winEventList.Long(0) = kEventClassWindow		      winEventList.Long(4) = kEventWindowDragStarted		      winEventList.Long(8) = kEventClassWindow		      winEventList.Long(12) = kEventWindowDragCompleted		      winEventList.Long(16) = kEventClassWindow		      winEventList.Long(20) = kEventWindowResizeStarted		      winEventList.Long(24) = kEventClassWindow		      winEventList.Long(28) = kEventWindowResizeCompleted		    end if		    		    if carbonEventHandlerUPP = 0 then		      carbonEventHandlerUPP = NewEventHandlerUPP(AddressOf HandleEvents)		    end if		    		    if InstallEventHandler(GetWindowEventTarget(w.Handle), carbonEventHandlerUPP, winEventList.Size\8, winEventList, winID, eventref) <> 0 then		      System.DebugLog "AsyncDragWindow.InstallEventHandler Failed."		    else		      ' Each window is given a unique ID		      if winRefs = Nil then winRefs = New Dictionary		      winRefs.Value(winID) = w		      w.carbonEventRef = eventref		      w.handlerID = winID		    end if		    		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Shared Function HandleEvents(chain As Integer, eventRef As Integer, userData As Integer) As Integer		  		  #if TargetMacOS then		    		    #pragma BackgroundTasks False		    #pragma StackOverflowChecking False		    		    Declare Function GetEventKind Lib kLibraryCarbon (inEvent As Integer) As Integer		    Declare Function GetEventClass Lib kLibraryCarbon (inEvent As Integer) As Integer		    		    Dim w As AsyncDragWindow		    		    ' Route events to the appropriate window instance		    if GetEventClass(eventref) = kEventClassWindow then		      if winRefs <> Nil AND winRefs.HasKey(userData) then		        w = winRefs.Value(userData)		        if w <> Nil then return w.RaiseAsyncEvent( GetEventKind(eventref) )		      end if		    end if		    		    return kEventNotHandledErr		    		  #endif		  		  return 0		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Shared Sub CleanUp(w As AsyncDragWindow)		  		  #if TargetMacOS then		    		    Declare Sub DisposeEventHandlerUPP Lib kLibraryCarbon (userUPP As Integer)		    		    if winRefs <> Nil then		      		      ' Remove the window instance		      if winRefs.HasKey(w.handlerID) then		        winRefs.Remove(w.handlerID)		      end if		      		      ' Clean up everything if this was the last one		      if winRefs.Count = 0 then		        winRefs = Nil		        winEventList = Nil		        winID = 0		        if carbonEventHandlerUPP <> 0 then		          DisposeEventHandlerUPP(carbonEventHandlerUPP)		        end if		        carbonEventHandlerUPP = 0		      end if		      		    end if		    		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Function RaiseAsyncEvent(eventkind As Integer) As Integer		  		  #if TargetMacOS then		    		    #pragma BackgroundTasks False		    #pragma StackOverflowChecking False		    		    ' Route events to the RB handlers		    		    ' Apple's Panther notes say:		    		    ' "...the DragStarted event will typically not be sent until		    ' some time after the user has actually started dragging the window."		    		    ' I haven't seen any unusally long delays but it is definately a few milliseconds off.		    		    Select Case (eventkind)		      		    Case kEventWindowDragStarted		      RaiseEvent MoveStarted		      return kNoErr		      		    Case kEventWindowDragCompleted		      		      RaiseEvent MoveCompleted' Always send this		      		      ' Emulate RB's built-in Moved event		      Dim l As Integer = Self.Left		      Dim t As Integer = Self.Top		      if lastTop <> t OR lastLeft <> l then		        lastTop = t		        lastLeft = l		        RaiseEvent Moved		      end if		      		      return kNoErr		      		    Case kEventWindowResizeStarted		      RaiseEvent ResizeStarted		      return kNoErr		      		    Case kEventWindowResizeCompleted		      RaiseEvent ResizeCompleted		      return kNoErr		      		    End Select		    		    return kEventNotHandledErr		    		  #endif		  		  return 0		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Top() As Integer		  		  #if TargetMacOS then		    		    ' RB's Top doesn't update immediately after kEventWindowDragCompleted		    ' so overload the getter method and grab the actual bounds.		    		    Dim r As MemoryBlock = GetGlobalRect		    return r.Short(0)		    		  #else		    		    return Window(Self).Top		    		  #endif		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Left() As Integer		  		  #if TargetMacOS then		    		    ' RB's Left doesn't update immediately after kEventWindowDragCompleted		    ' so overload the getter method and grab the actual bounds.		    		    Dim r As MemoryBlock = GetGlobalRect		    return r.Short(2)		    		  #else		    		    return Window(Self).Left		    		  #endif		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Function GetGlobalRect() As MemoryBlock		  		  #if TargetMacOS then		    		    Declare Function GetWindowBounds Lib kLibraryCarbon (windowRef As Integer, regionCode As Integer, globalBounds As Ptr) As Integer		    		    Const kWindowGlobalPortRgn = 40		    		    if rect = Nil then rect = NewMemoryBlock(8)		    if GetWindowBounds(self.Handle, kWindowGlobalPortRgn, rect) <> kNoErr then		      System.DebugLog "AsyncDragWindow.GetGlobalRect Failed."		    end if		    		    return rect		    		  #endif		  		  return Nil		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Left(Assigns val As Integer)		  		  ' Need to override the Left setter or else the		  ' chached values can get out of sync...		  		  Window(self).Left = val' Odd cast but Super doesn't work...		  lastLeft = val		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Top(Assigns val As Integer)		  		  ' Need to override the Top setter or else the		  ' chached values can get out of sync...		  		  Window(self).Top = val' Odd cast but Super doesn't work...		  lastTop = val		End Sub	#tag EndMethod	#tag Hook, Flags = &h0		Event Open()	#tag EndHook	#tag Hook, Flags = &h0		Event Close()	#tag EndHook	#tag Hook, Flags = &h0		Event MoveStarted()	#tag EndHook	#tag Hook, Flags = &h0		Event ResizeStarted()	#tag EndHook	#tag Hook, Flags = &h0		Event Moved()	#tag EndHook	#tag Hook, Flags = &h0		Event MoveCompleted()	#tag EndHook	#tag Hook, Flags = &h0		Event ResizeCompleted()	#tag EndHook	#tag Property, Flags = &h21		Private Shared winEventList As MemoryBlock	#tag EndProperty	#tag Property, Flags = &h21		Private carbonEventRef As Integer	#tag EndProperty	#tag Property, Flags = &h21		Private Shared winID As Integer	#tag EndProperty	#tag Property, Flags = &h21		Private handlerID As Integer	#tag EndProperty	#tag Property, Flags = &h21		Private Shared carbonEventHandlerUPP As Integer	#tag EndProperty	#tag Property, Flags = &h21		Private Shared winRefs As Dictionary	#tag EndProperty	#tag Property, Flags = &h21		Private rect As MemoryBlock	#tag EndProperty	#tag Property, Flags = &h21		Private lastTop As Integer	#tag EndProperty	#tag Property, Flags = &h21		Private lastLeft As Integer	#tag EndProperty	#tag Constant, Name = kEventClassWindow, Type = Double, Dynamic = False, Default = \"\'wind\'", Scope = Private	#tag EndConstant	#tag Constant, Name = kEventWindowDragCompleted, Type = Double, Dynamic = False, Default = \"31", Scope = Private	#tag EndConstant	#tag Constant, Name = kEventWindowDragStarted, Type = Double, Dynamic = False, Default = \"30", Scope = Private	#tag EndConstant	#tag Constant, Name = kLibraryCarbon, Type = String, Dynamic = False, Default = \"", Scope = Private		#Tag Instance, Platform = Mac Carbon PEF, Language = Default, Definition  = \"CarbonLib"		#Tag Instance, Platform = Mac Mach-O, Language = Default, Definition  = \"Carbon"	#tag EndConstant	#tag Constant, Name = kEventNotHandledErr, Type = Double, Dynamic = False, Default = \"-9874", Scope = Private	#tag EndConstant	#tag Constant, Name = kNoErr, Type = Double, Dynamic = False, Default = \"0", Scope = Private	#tag EndConstant	#tag Constant, Name = kEventWindowResizeStarted, Type = Double, Dynamic = False, Default = \"28", Scope = Private	#tag EndConstant	#tag Constant, Name = kEventWindowResizeCompleted, Type = Double, Dynamic = False, Default = \"29", Scope = Private	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="ImplicitInstance"			Visible=true			Group="Appearance"			InitialValue="True"			EditorType="Boolean"			InheritedFrom="Window"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Window"		#tag EndViewProperty		#tag ViewProperty			Name="Interfaces"			Visible=true			Group="ID"			InheritedFrom="Window"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Window"		#tag EndViewProperty		#tag ViewProperty			Name="Placement"			Visible=true			Group="Position"			InitialValue="0"			Type="Integer"			EditorType="Enum"			InheritedFrom="Window"			#tag EnumValues				"0 - Default"				"1 - Parent Window"				"2 - Main Screen"				"3 - Parent Window Screen"				"4 - Stagger"			#tag EndEnumValues		#tag EndViewProperty		#tag ViewProperty			Name="Width"			Visible=true			Group="Position"			InitialValue="300"			Type="Integer"			InheritedFrom="Window"		#tag EndViewProperty		#tag ViewProperty			Name="Height"			Visible=true			Group="Position"			InitialValue="300"			Type="Integer"			InheritedFrom="Window"		#tag EndViewProperty		#tag ViewProperty			Name="MinWidth"			Visible=true			Group="Position"			InitialValue="64"			Type="Integer"			InheritedFrom="Window"		#tag EndViewProperty		#tag ViewProperty			Name="MinHeight"			Visible=true			Group="Position"			InitialValue="64"			Type="Integer"			InheritedFrom="Window"		#tag EndViewProperty		#tag ViewProperty			Name="MaxWidth"			Visible=true			Group="Position"			InitialValue="32000"			Type="Integer"			InheritedFrom="Window"		#tag EndViewProperty		#tag ViewProperty			Name="MaxHeight"			Visible=true			Group="Position"			InitialValue="32000"			Type="Integer"			InheritedFrom="Window"		#tag EndViewProperty		#tag ViewProperty			Name="Frame"			Visible=true			Group="Appearance"			InitialValue="0"			Type="Integer"			EditorType="Enum"			InheritedFrom="Window"			#tag EnumValues				"0 - Document"				"1 - Movable Modal"				"2 - Modal Dialog"				"3 - Floating Window"				"4 - Plain Box"				"5 - Shadowed Box"				"6 - Rounded Window"				"7 - Global Floating Window"				"8 - Sheet Window"				"9 - Metal Window"				"10 - Drawer Window"			#tag EndEnumValues		#tag EndViewProperty		#tag ViewProperty			Name="Composite"			Visible=true			Group="Appearance"			InitialValue="False"			Type="Boolean"			InheritedFrom="Window"		#tag EndViewProperty		#tag ViewProperty			Name="HasBackColor"			Visible=true			Group="Appearance"			InitialValue="False"			Type="Boolean"			InheritedFrom="Window"		#tag EndViewProperty		#tag ViewProperty			Name="BackColor"			Visible=true			Group="Appearance"			InitialValue="&hFFFFFF"			Type="Color"			InheritedFrom="Window"		#tag EndViewProperty		#tag ViewProperty			Name="Backdrop"			Visible=true			Group="Appearance"			Type="Picture"			EditorType="Picture"			InheritedFrom="Window"		#tag EndViewProperty		#tag ViewProperty			Name="Title"			Visible=true			Group="Appearance"			InitialValue="Untitled"			Type="String"			InheritedFrom="Window"		#tag EndViewProperty		#tag ViewProperty			Name="Visible"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="Window"		#tag EndViewProperty		#tag ViewProperty			Name="FullScreen"			Visible=true			Group="Appearance"			InitialValue="False"			Type="Boolean"			InheritedFrom="Window"		#tag EndViewProperty		#tag ViewProperty			Name="MenuBarVisible"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="Window"		#tag EndViewProperty		#tag ViewProperty			Name="CloseButton"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="Window"		#tag EndViewProperty		#tag ViewProperty			Name="Resizeable"			Visible=true			Group="Appearance"			InitialValue="False"			Type="Boolean"			InheritedFrom="Window"		#tag EndViewProperty		#tag ViewProperty			Name="LiveResize"			Visible=true			Group="Appearance"			InitialValue="False"			Type="Boolean"			InheritedFrom="Window"		#tag EndViewProperty		#tag ViewProperty			Name="MaximizeButton"			Visible=true			Group="Appearance"			InitialValue="False"			Type="Boolean"			InheritedFrom="Window"		#tag EndViewProperty		#tag ViewProperty			Name="MinimizeButton"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="Window"		#tag EndViewProperty		#tag ViewProperty			Name="BalloonHelp"			Visible=true			Group="Appearance"			Type="String"			InheritedFrom="Window"		#tag EndViewProperty		#tag ViewProperty			Name="MacProcID"			Visible=true			Group="Appearance"			InitialValue="0"			Type="Integer"			InheritedFrom="Window"		#tag EndViewProperty		#tag ViewProperty			Name="MenuBar"			Visible=true			Group="Appearance"			Type="MenuBar"			EditorType="MenuBar"			InheritedFrom="Window"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass