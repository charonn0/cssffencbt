#tag ClassProtected Class BCEncryptorInherits Thread	#tag Event		Sub Run()		  If DoEncrypt = True then		    If Not EncryptStart Then		      Beep		      MsgBox "Encryption Failed!"		      arc.Cancel		      enc.Kill		      wMain.ResetWindow		      If Preferences.GrowlEnabled = True then		        PostGrowl("Encryption Error")		      End If		    End If		    		  Else		    If Not DecryptTask Then		      Beep		      MsgBox "Decryption failed!"		      arc.Cancel		      enc.Kill		      wMain.ResetWindow		      If Preferences.GrowlEnabled = True then		        PostGrowl("Decryption Error")		      End If		    End If		  End If		  		End Sub	#tag EndEvent	#tag Method, Flags = &h0		Sub Encrypt(Source() as FolderItem, TargetItem as FolderItem, EncryptionMethod as String, PassKey as String, ProgBar as ProgressBar, Text as StaticText)		  //This sets the properties up for the thread to run.		  Dim i as integer		  		  Me.DoEncrypt = True		  Me.Target = TargetItem		  Redim Me.Source(-1)		  For i = 0 to UBound(Source)		    Me.Source.Append(Source(i))		  Next		  Me.Method = EncryptionMethod		  Me.Key = PassKey		  Me.Bar = ProgBar		  Me.stUpdate = Text		  		  Me.Run		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function EncryptTask() As Boolean		  #pragma DisableBackgroundTasks 'Optimization		  TEMPtarget = TemporaryFolder.Child("BitClamp.cdx")		  zSource = TemporaryFolder.Child("BitClamp.zip") 'Sets source to become our new hidden zip file.		  		  //Error check		  If zSource = Nil Then		    Return False		  End If		  //		  		  INStream = zSource.OpenAsBinaryFile 'Stream is now the binary data of our zip file.		  		  Bar.Maximum = INstream.length		  		  OUTStream = TEMPTarget.CreateBinaryFile("") 'Creates a file we can write the encrypted data into.		  OUTStream.close		  		  Dim tagger as new BCTagger		  		  tagger.EncryptionType = Method		  tagger.q = Key		  tagger.CreateTag(TEMPTarget)		  		  OUTStream = TEMPTarget.OpenAsBinaryFile(True)		  OutStream.Position = tagger.TagLength		  		  '- Encrypting the data and then writing it.=====================================================		  		  //Each encryption method follows the same basic process.		  '1 - Loops through the system.		  '2 - Reads a certain amount of the data into the roving block		  '3 - Streams the data into the encryption algorithm.		  '4 - Writes the data to the new file.		  '//		  stUpdate.Text = "Encrypting..."		  		  //Encrypts.		  Select Case Method		  Case "Blowfish"		    Dim Jim as new BlowfishCBC(Key)		    If OUTStream <> Nil then		      While INStream.position < InStream.length		        app.YieldToNextThread  'Keeps the app responsive		        Block = InStream.Read(80000)		        Block = Jim.Encrypt(Block)		        OUTStream.Write(Block)		        Bar.Value = INstream.position		        //Draw to dock icon.		      Wend		      Block = Jim.FinishEncrypt()		      OUTStream.Write(Block)		      OUTStream.close		      INStream.close		    Else		      Return False		    End If		    		  Case "Serpent"		    Dim Fred as new Serpent(Key, CipherKeyType.Encrypt, CipherMode.CBC)		    If OUTStream <> Nil then		      While InStream.position < InStream.length		        app.YieldToNextThread		        Block = INStream.Read(160000)		        Block = Fred.Encrypt(Block)		        OUTStream.Write(Block)		        Bar.Value = INstream.position		      Wend		      Block = Fred.FinishEncrypt()		      OUTStream.Write(Block)		      OUTStream.close		      INStream.close		    Else		      Return False		    End If		    		  Case "AES"		    Dim Bob as New AES_CBC(Key)		    If OUTStream <> Nil Then		      While InStream.position < InStream.Length		        app.YieldToNextThread		        Block = INStream.Read(160000)		        Block = Bob.Encrypt(Block)		        OUTStream.Write(Block)		        Bar.Value = INStream.Position		      Wend		      Block = Bob.FinishEncrypt()		      OUTStream.Write(Block)		      OUTStream.Close		      INStream.Close		    Else		      Return False		    End If		  End Select		  		  //If we want to mimic we do it here.		  If Preferences.EnableMimics Then		    //Update the UI		    stUpdate.Text = "Mimicking file..."		    Bar.Maximum = 0		    		    Dim mimicker As New DGFileMimicker		    		    mimicker.mimicFile(currentMimic, Me.Target, TemporaryFolder.Child("BitClamp.cdx"))		    stUpdate.text = "Encryption Finished."		    If Preferences.GrowlEnabled = True then		      PostGrowl("Encryption Finished")		    End If		    wMain.bCancel.Caption = "OK"		    wMain.bCancel.Default = True		    		    //Bounce dock icon once		    If Preferences.BounceDockIcon Then		      NotifyStart("")		      NotifyStop		    End If		    Bar.Maximum = 1		    Bar.Value = Bar.Maximum		    Return True		  End If		  		  If Preferences.Overwrite Then		    If Preferences.Overwrite Then		      For Each element as FolderItem In Source		        element.MoveFileTo(TrashFolder)		      Next		    End If		    me.TEMPtarget.Name = me.Target.Name		    TEMPtarget.MoveFileTo(me.Target.Parent)		  Else		    TEMPtarget.MoveFileTo(me.Target)		  End If		  TemporaryFolder.Child("BitClamp.Zip").Delete		  		  		  		  //Update UI		  stUpdate.text = "Encryption Finished."		  If Preferences.GrowlEnabled = True then		    PostGrowl("Encryption Finished")		  End If		  wMain.bCancel.Caption = "OK"		  wMain.bCancel.Default = True		  		  'wMain.ResetWindow		  		  //Bounce dock icon once		  If Preferences.BounceDockIcon Then		    NotifyStart("")		    NotifyStop		  End If		  Return True		  		  		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Decrypt(SourceItem as FolderItem, TargetItem as FolderItem, DecryptionMethod as String, PassKey as String, ProgBar as Progressbar, Updates as StaticText)		  //Sets the properties of the class so we can decrypt.		  		  Me.DoEncrypt = False		  Me.Target = TargetItem		  Me.zSource = SourceItem		  Me.Method = DecryptionMethod		  Me.Key = PassKey		  Me.Bar = ProgBar		  Me.stUpdate = Updates		  		  Me.Run		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Function DecryptTask() As Boolean		  #pragma DisableBackgroundTasks		  '======================================================		  'This is the workhorse method of the decryption.		  'It involves the following steps:		  ' - The File is loaded into a stream.		  ' - The data is then streamed into the decryption method.		  ' - The data is saved into a hidden file.		  ' - The hidden file is then unarchived and resaved.		  '=======================================================		  		  //Data loaded into a stream.		  InStream = zSource.OpenAsBinaryFile 'The instream now contains the encrypted data.		  INStream.Position = CurrentTagLocation + Checker.TagLength		  Bar.Maximum = INStream.length		  stUpdate.Text = "Decrypting..."		  		  zSource = TemporaryFolder.Child("BitClamp.zip")		  OUTStream = zSource.CreateBinaryFile("")		  //Decryption		  Select Case Method		  Case "Blowfish"		    Dim Jim as New BlowfishCBC(Key)		    If OUTStream <> Nil then		      While InStream.Position < InStream.Length		        app.YieldToNextThread		        Block = InStream.Read(80000)		        Block = Jim.Decrypt(Block)		        OUTStream.Write(Block)		        Bar.Value = Instream.position		      Wend		      Block = Jim.FinishDecrypt		      OutStream.Write(Block)		      OutStream.Close		      InStream.Close		    Else		      Return False		    End If		  Case "Serpent"		    Dim Fred as new Serpent(Key, CipherKeyType.Decrypt, CipherMode.CBC)		    If OUTStream <> Nil then		      While InStream.Position < InStream.Length		        app.YieldToNextThread		        Block = InStream.Read(160000)		        Block = Fred.Decrypt(Block)		        OUTStream.Write(Block)		        Bar.Value = Instream.position		      Wend		      Block = Fred.FinishDecrypt		      OutStream.Write(Block)		      OutStream.Close		      InStream.Close		    Else		      Return False		    End If		  Case "AES"		    Dim Bob as New AES_CBC(Key)		    If OUTStream <> Nil Then		      While INStream.Position < INStream.Length		        app.YieldToNextThread		        Block = INStream.Read(160000)		        Block = Bob.Decrypt(Block)		        OUTStream.Write(Block)		        Bar.Value = INStream.Position		      Wend		      Block = Bob.FinishDecrypt		      OutStream.Write(Block)		      OUTStream.Close		      INStream.Close		    Else		      Return False		    End If		  End Select		  		  Bar.Maximum = 0 'barber poles		  stUpdate.text = "Unarchiving..."		  		  //Unarchiving		  Dim newTarget as FolderItem		  If NOT Preferences.Overwrite Then		    newTarget =  Target.Child("DecryptedFiles") 'GetFolderItem(Target.ShellPath + "/DecryptedFiles/", FolderItem.PathTypeShell)		  Else		    newTarget = Target		  End If		  Dim UnArc as New BCArchiver		  ZipConfig.UsePlugin = True		  If Not UnArc.UnArchive(newTarget) Then		    Return False		  End If		  'If preferences.Overwrite Then		  'Me.zSource.MoveFileTo(TrashFolder)		  'End If		  		  Return True		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Function EncryptStart() As Boolean		  'Dim arc as new BCArchiver		  		  '//UI Update ======================================||		  Bar.Maximum = 0 'Barber poles		  If Preferences.Compress Then		    stUpdate.text = "Compressing..."		  Else		    stUpdate.text = "Archiving..."		  End If		  		  '//============================================||		  Dim arc as new BCArchiver		  If not arc.Archive(Source(), Me) Then 'Archive the file using the BCArchiver class.		    Return False		  End If		  Return True		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub FinishDecrypt()		  //Update UI		  stUpdate.text = "Decryption Complete."		  Bar.Maximum = 1		  Bar.Value = Bar.Maximum		  If Preferences.GrowlEnabled = True then		    PostGrowl("Decryption Finished")		  End If		  wMain.bCancel.Caption= "OK"		  wMain.bCancel.Default= True		  		  If Preferences.BounceDockIcon Then		    //Bounce dock icon once		    NotifyStart("")		    NotifyStop		  End If		End Sub	#tag EndMethod	#tag Property, Flags = &h1		Protected DoEncrypt As Boolean	#tag EndProperty	#tag Property, Flags = &h1		Protected Target As Folderitem	#tag EndProperty	#tag Property, Flags = &h1		Protected Source() As FolderItem	#tag EndProperty	#tag Property, Flags = &h1		#tag Note			The encryption/decryption method to be used.		#tag EndNote		Protected Method As String	#tag EndProperty	#tag Property, Flags = &h1		#tag Note			Stores the password supplied by the user.		#tag EndNote		Protected Key As String	#tag EndProperty	#tag Property, Flags = &h1		#tag Note			Used to hold the binary data inputted into the algorithms.		#tag EndNote		Protected INStream As BinaryStream	#tag EndProperty	#tag Property, Flags = &h1		#tag Note			Used to stream data out of the algorithms.		#tag EndNote		Protected OUTStream As BinaryStream	#tag EndProperty	#tag Property, Flags = &h1		Protected Block As MemoryBlock	#tag EndProperty	#tag Property, Flags = &h1		Protected Bar As ProgressBar	#tag EndProperty	#tag Property, Flags = &h1		Protected stUpdate As StaticText	#tag EndProperty	#tag Property, Flags = &h1		Protected zSource As FolderItem	#tag EndProperty	#tag Property, Flags = &h1		Protected TEMPtarget As FolderItem	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="Priority"			Visible=true			Group="Behavior"			InitialValue="5"			Type="Integer"			InheritedFrom="Thread"		#tag EndViewProperty		#tag ViewProperty			Name="StackSize"			Visible=true			Group="Behavior"			InitialValue="0"			Type="Integer"			InheritedFrom="Thread"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass